
# Conteo de missing en las variables #
#------------------------------------#

funmiss <- function(x) {
  
  sum(is.na(x))/length(x)*100
  
  }

# Patrón de missing #
#-------------------#

g_patron_missing <- function(data, preg){

  data[preg] %>%
    mutate(id = row_number()) %>%
    gather(-id, key = "key", value = "val") %>%
    mutate(isna = is.na(val)) %>%
    ggplot(aes(rev(key), id, fill = isna)) +
    geom_raster(alpha = 0.8) +
    theme_minimal() +
    theme(panel.grid = element_blank(),
          axis.text.y = element_text(size = 4.2, color = "black", hjust = 0),
          axis.text.x = element_blank(),
          legend.position = "bottom",
          axis.title = element_text(size = 8.5),
          legend.text = element_text(size = 8, color = "#5A5D63"),
          plot.margin = unit(c(0, 0, 0.0, 0), "cm")) +
    scale_fill_manual(name = "", values = c('gray', 'black'), labels = c("Presente", "Missing")) +
    labs(x = 'Pregunta\n', 
         y = "Observaciones", 
         title = " ",
         subtitle,
         captiomn) +
    scale_x_discrete(labels = rev(preg)) +
    coord_flip()

}

# Media pesada # 
#--------------#

weighted_mean <- function(x, w, ..., na.rm = FALSE){
  
  if(na.rm){
    
    df_omit <- na.omit(data.frame(x, w))
    
    return(weighted.mean(df_omit$x, df_omit$w, ...))
    
  } 
  
  weighted.mean(x, w, ...)
}

# Cálculo de la moda con pesos #
#------------------------------#

lamoda_pesos <- function(x, weights = NULL) {
  if (is.null(weights)) {
    u <- unique(x)
    tab <- tabulate(match(x, u))
    u[tab == max(tab)]
  } else {
    # Verificar que la longitud de 'x' y 'weights' sea la misma
    if (length(x) != length(weights)) {
      stop("La longitud de 'x' y 'weights' debe ser la misma.")
    }
    
    # Crear una tabla de frecuencia ponderada
    df <- data.frame(x, weights)
    df <- df[order(df$x), ]
    df <- df[!duplicated(df$x), ]
    df$weighted_freq <- ave(df$weights, df$x, FUN = sum)
    
    # Encontrar la moda basada en las frecuencias ponderadas
    moda <- df[df$weighted_freq == max(df$weighted_freq), "x"]
    moda
  }
}

# Redondear #
#-----------#

redondear<-function(x,d=0){
  (floor(x*10**d)+as.numeric((x*10**d-floor(x*10**d))>=0.5))/10**d
}

# Cambiar punto por coma decimal #
#--------------------------------#

puntocoma2<-function(x,dec=0){
  if(is.numeric(x)){
    if(length(dim(x))==2){
      gsub("\\.",",",apply(redondear(x,dec), 2, sprintf,fmt=paste0("%.",dec,"f")))
    }else{gsub("\\.",",",sprintf(paste0("%.",dec,"f"), redondear(x,dec)))}
  }else{
    if(length(dim(x))==2){
      redondear(apply(gsub(",","\\.",x),2,as.numeric),dec)
    }else{redondear(as.numeric(gsub(",","\\.",x)),dec)}
  }
  
} 

# Ver en Excel #
#--------------#

show_in_excel <- function(.data){
  tmp <- paste0(tempfile(),".xlsx")
  write.xlsx(.data,tmp)
  browseURL(url=tmp)
}

# Contar NA en las filas #
#------------------------#

rowSumsNA <- function(x) rowSums(is.na(x)) 

# Acortar oraciones en variables tipo factor #
#--------------------------------------------#

str_wrap_factor <- function(x, ...) {
  levels(x) <- str_wrap(levels(x), ...)
  x
}

# Colores UMC #
#-------------#

color_pre_in <- '#A5A5A5' # Color "Previo al inicio"
color_inicio <- '#A74D4B' # Color "En inicio"
color_proces <- '#F79646' # Color "En proceso"
color_satisf <- '#9BBB59' # Color "Satisfactorio"

# Función que calcula los resultados de rendimiento junto con sus errores estandar #
#----------------------------------------------------------------------------------#

tablares <- function(bd_datos,areacurr,alcance){
  
  
  conteo <- nchar(bd_datos %>% 
                    select(matches("^M500_.*_CT$")) %>% 
                    names()) %>% 
    as.numeric()
  
  if (conteo > 18) {
    
    # Censales
    
    if (alcance == "Nacional") {
    
    if (areacurr == "Lectura") {
      
      nom_peso <- "peso_CT"
      nom_area <- "Lectura"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CT$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CT$")) %>% 
        names()
      
    } else if (areacurr == "Matemática") {
      
      nom_peso <- "peso_MA"
      nom_area <- "Matemática"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_MA$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_MA$")) %>% 
        names()
      
    } else if (areacurr == "Ciencias sociales") {
      
      nom_peso <- "peso_CS"
      nom_area <- "Ciencias sociales"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CS$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CS$")) %>% 
        names()
      
    } else if (areacurr == "Ciencia y tecnología") {
      
      nom_peso <- "peso_CN"
      nom_area <- "Ciencia y tecnología"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CN$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CN$")) %>% 
        names()
      
    } 

    nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
    
    a1 <- bd_datos %>% 
      filter(!is.na(!!sym(nom2_areaeval))) %>% 
      group_by(!!sym(nom2_areaeval)) %>% 
      summarise(tot = sum(!!sym(nom_peso), na.rm = TRUE)) %>% 
      mutate(ptot = redondear(tot/sum(tot)*100,1)) %>% 
      select(-tot) %>% 
      setNames(c("tipo_esp","valor")) %>% 
      mutate(tipo_esp = case_when(
        grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
        grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
        grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
        grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
        grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
        grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
        TRUE ~ "Limpiar variable"
      ),
      area_eval = nom_area,
      estrato1_1 = alcance,
      estrato1_2 = alcance,
      estrato2 = alcance,
      error = NA) %>% 
      mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                              TRUE ~ "Nivel de logro")) %>%
      mutate(año = str_sub(nom1_areaeval, -7, -4),
             grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                    nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                    nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                    TRUE ~ "Limpiar variable")) %>% 
      select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
    
    a2 <- bd4p_24 %>% 
      filter(!is.na(grupo_ECE_4P_2024_CT)) %>% 
      mutate(nacional = alcance) %>% 
      group_by(nacional) %>% 
      summarise(valor = redondear(weighted_mean(!!sym(nom1_areaeval),!!sym(nom_peso),na.rm = TRUE),0)) %>% 
      setNames(c("tipo_esp","valor")) %>% 
      mutate(tipo_esp = case_when(
        grepl("^Nacional", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
        grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
        grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
        grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
        grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
        grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
        TRUE ~ "Limpiar variable"
      ),
      area_eval = nom_area,
      estrato1_1 = alcance,
      estrato1_2 = alcance,
      estrato2 = alcance,
      error = NA) %>% 
      mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                              TRUE ~ "Nivel de logro")) %>%
      mutate(año = str_sub(nom1_areaeval, -7, -4),
             grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                    nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                    nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                    TRUE ~ "Limpiar variable")) %>% 
      select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
    
    return(rbind(a1,a2))
    
    } else if (alcance %in% "Estratos") {
      
      if (areacurr == "Lectura") {
        
        nom_peso <- "peso_CT"
        nom_area <- "Lectura"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CT$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CT$")) %>% 
          names()
        
      } else if (areacurr == "Matemática") {
        
        nom_peso <- "peso_MA"
        nom_area <- "Matemática"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_MA$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_MA$")) %>% 
          names()
        
      } else if (areacurr == "Ciencias sociales") {
        
        nom_peso <- "peso_CS"
        nom_area <- "Ciencias sociales"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CS$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CS$")) %>% 
          names()
        
      } else if (areacurr == "Ciencia y tecnología") {
        
        nom_peso <- "peso_CN"
        nom_area <- "Ciencia y tecnología"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CN$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CN$")) %>% 
          names()
        
      } 

      nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)

      nom_estratos <- c("sexo","gestion2","area","caracteristica2","nom_dre")
      
      estratos <- list()
      
      for(i in 1:length(nom_estratos)){
        
        b1 <- bd4p_24 %>% 
          filter(!is.na(!!sym(nom_peso))) %>% 
          mutate_at(vars(sexo),
                    funs(as.character)) %>% 
          mutate(sexo = case_when(sexo %in% "1" ~ "Hombre",
                                  sexo %in% "2" ~ "Mujer",
                                  TRUE ~ sexo))
        
        a1 <- b1 %>% 
          filter(!is.na(!!sym(nom2_areaeval))) %>% 
          group_by(!!sym(nom_estratos[[i]]),!!sym(nom2_areaeval)) %>% 
          summarise(tot = sum(peso_CT, na.rm = TRUE)) %>% 
          mutate(ptot = redondear(tot/sum(tot)*100,1)) %>% 
          select(-tot) %>% 
          setNames(c("estrato2","tipo_esp","valor")) %>% 
          mutate(tipo_esp = case_when(
            grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
            grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
            grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
            grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
            TRUE ~ "Limpiar variable"
          ),
          area_eval = nom_area,
          estrato1_1 = nom_estratos[[i]],
          estrato1_2 = nom_estratos[[i]],
          error = NA) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        a2 <- b1 %>% 
          filter(!is.na(grupo_ECE_4P_2024_CT)) %>% 
          mutate(nacional = "Nacional") %>% 
          group_by(!!sym(nom_estratos[[i]])) %>% 
          summarise(valor = redondear(weighted_mean(!!sym(nom1_areaeval)),0)) %>% 
          setNames(c("estrato2","valor")) %>% 
          mutate(tipo_esp = "Medida promedio",
                 area_eval = nom_area,
                 estrato1_1 = nom_estratos[[i]],
                 estrato1_2 = nom_estratos[[i]],
                 error = NA) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        estratos[[i]] <- rbind(a1,a2)
        
      }
      
      return(bind_rows(estratos))
      
    } else {
      
      if (areacurr == "Lectura") {
        
        nom_peso <- "peso_CT"
        nom_area <- "Lectura"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CT$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CT$")) %>% 
          names()
        
      } else if (areacurr == "Matemática") {
        
        nom_peso <- "peso_MA"
        nom_area <- "Matemática"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_MA$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_MA$")) %>% 
          names()
        
      } else if (areacurr == "Ciencias sociales") {
        
        nom_peso <- "peso_CS"
        nom_area <- "Ciencias sociales"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CS$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CS$")) %>% 
          names()
        
      } else if (areacurr == "Ciencia y tecnología") {
        
        nom_peso <- "peso_CN"
        nom_area <- "Ciencia y tecnología"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CN$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CN$")) %>% 
          names()
        
      } 

      nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)

      nom_estratos <- c(alcance)
      
      estratos <- list()
      
      for(i in 1:length(nom_estratos)){
        
        b1 <- bd4p_24 %>% 
          filter(!is.na(!!sym(nom_peso))) %>% 
          mutate_at(vars(sexo),
                    funs(as.character)) %>% 
          mutate(sexo = case_when(sexo %in% "1" ~ "Hombre",
                                  sexo %in% "2" ~ "Mujer",
                                  TRUE ~ sexo))
        
        a1 <- b1 %>% 
          filter(!is.na(!!sym(nom2_areaeval))) %>% 
          group_by(!!sym(nom_estratos[[i]]),!!sym(nom2_areaeval)) %>% 
          summarise(tot = sum(peso_CT, na.rm = TRUE)) %>% 
          mutate(ptot = redondear(tot/sum(tot)*100,1)) %>% 
          select(-tot) %>% 
          setNames(c("estrato2","tipo_esp","valor")) %>% 
          mutate(tipo_esp = case_when(
            grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
            grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
            grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
            grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
            TRUE ~ "Limpiar variable"
          ),
          area_eval = nom_area,
          estrato1_1 = nom_estratos[[i]],
          estrato1_2 = nom_estratos[[i]],
          error = NA) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        a2 <- b1 %>% 
          filter(!is.na(grupo_ECE_4P_2024_CT)) %>% 
          mutate(nacional = "Nacional") %>% 
          group_by(!!sym(nom_estratos[[i]])) %>% 
          summarise(valor = redondear(weighted_mean(!!sym(nom1_areaeval)),0)) %>% 
          setNames(c("estrato2","valor")) %>% 
          mutate(tipo_esp = "Medida promedio",
                 area_eval = nom_area,
                 estrato1_1 = nom_estratos[[i]],
                 estrato1_2 = nom_estratos[[i]],
                 error = NA) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        estratos[[i]] <- rbind(a1,a2)
        
      }
      
      return(bind_rows(estratos))
      
    }
    
    
    # Muestrales
    
  } else { 
    
  
  # Filtros por área evaluada #
  #---------------------------#
  
  if (alcance == "Nacional") {
    
    if (areacurr == "Lectura") {
      
      nom_peso <- "peso_CT"
      nom_area <- "Lectura"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CT$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CT$")) %>% 
        names()
      
    } else if (areacurr == "Matemática") {
      
      nom_peso <- "peso_MA"
      nom_area <- "Matemática"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_MA$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_MA$")) %>% 
        names()
      
    } else if (areacurr == "Ciencias sociales") {
      
      nom_peso <- "peso_CS"
      nom_area <- "Ciencias sociales"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CS$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CS$")) %>% 
        names()
      
    } else if (areacurr == "Ciencia y tecnología") {
      
      nom_peso <- "peso_CN"
      nom_area <- "Ciencia y tecnología"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CN$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CN$")) %>% 
        names()
      
    } 
    
    bd1 <- bd_datos %>% 
      mutate(cod_mod8 = paste0(cod_mod7,anexo)) %>%
      filter(!is.na(!!sym(nom_peso)))
    
    nom_strata <- bd1 %>% 
      select(starts_with("Estrato")) %>% 
      names()
    
    nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
    
    # Diseño muestral #
    #-----------------#
    
    options(survey.lonely.psu = "certainty")
    
    dmuestral <- svydesign(id=~cod_mod8,
                           strata=as.formula(paste0("~", nom_strata)),
                           nest=TRUE,
                           weights=as.formula(paste0("~", nom_peso)),
                           data=bd1,
                           pps = "brewer")
    
    # Cálculo de resultados #
    #-----------------------#
    
    nom_vector <- c(nom1_areaeval,nom2_areaeval)
    
    nacional <- list()
    
    for (i in 1:length(nom_vector)) {
      
      nacional[[i]] <- lapply(nom_vector[[i]], function(var) {
        
        formula <- as.formula(paste0("~", var))  # Crear la fórmula
        
        resultado <- svymean(formula,
                             design = dmuestral, 
                             na.rm = TRUE) %>% 
          as.data.frame() %>% 
          rownames_to_column(var = "tipo_esp") %>%
          mutate(tipo_esp = case_when(
            grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
            grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
            grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
            grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
            TRUE ~ "Limpiar variable"
          ),
          area_eval = nom_area,
          estrato1_1 = alcance,
          estrato1_2 = alcance,
          estrato2 = alcance) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          setNames(c("tipo_esp", "valor", "error","area_eval","estrato1_1","estrato1_2","estrato2","tipo","año","grado_eval"))  # Renombrar columnas
        
        # Aquí aplicamos el redondeo basado en el índice fuera del `lapply`
        
        if (i == 1) {
          
          # Si es medida promedio, redondeamos "valor" a 0 decimales
          
          resultado <- resultado %>% 
            mutate(valor = redondear(valor, 0), 
                   error = redondear(error, 1))
          
        } else if (i == 2) {
          # Si es nivel de logro, redondeamos "valor" multiplicado por 100 a 1 decimal
          resultado <- resultado %>% 
            mutate(valor = redondear(valor*100, 1), 
                   error = redondear(error*100, 1))
        }
        
        
      })
      
    }  
    
    bd_int <- bind_rows(nacional) %>% 
      select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
    
    return(bd_int)
    
  } else if (alcance == "Estratos") {
    
    if (areacurr == "Lectura") {
      
      nom_peso <- "peso_CT"
      nom_area <- "Lectura"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CT$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CT$")) %>% 
        names()
      
    } else if (areacurr == "Matemática") {
      
      nom_peso <- "peso_MA"
      nom_area <- "Matemática"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_MA$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_MA$")) %>% 
        names()
      
    } else if (areacurr == "Ciencias sociales") {
      
      nom_peso <- "peso_CS"
      nom_area <- "Ciencias sociales"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CS$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CS$")) %>% 
        names()
      
    } else if (areacurr == "Ciencia y tecnología") {
      
      nom_peso <- "peso_CN"
      nom_area <- "Ciencia y tecnología"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CN$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CN$")) %>% 
        names()
      
    }
    
    bd1 <- bd_datos %>% 
      mutate(cod_mod8 = paste0(cod_mod7,anexo)) %>%
      filter(!is.na(!!sym(nom_peso))) %>% 
      mutate_at(vars(sexo),
                funs(as.character)) %>% 
      mutate(sexo = case_when(sexo %in% "1" ~ "Hombre",
                              sexo %in% "2" ~ "Mujer",
                              sexo %in% c(" ","N") ~ NA_character_,
                              TRUE ~ sexo)) %>% 
      filter(!is.na(sexo))
    
    nom_strata <- bd1 %>% 
      select(starts_with("Estrato")) %>% 
      names()
    
    nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
    
    # Diseño muestral #
    #-----------------#
    
    options(survey.lonely.psu = "certainty")
    
    dmuestral <- svydesign(id=~cod_mod8,
                           strata=as.formula(paste0("~", nom_strata)),
                           nest=TRUE,
                           weights=as.formula(paste0("~", nom_peso)),
                           data=bd1,
                           pps = "brewer")
    
    # Cálculo de resultados #
    #-----------------------#
    
    nom_estratos <- c("sexo","gestion2","area","caracteristica2","nom_dre")
    
    estratos <- list()
    
    for(i in 1:length(nom_estratos)){
      
      a1 <- svyby(
        as.formula(paste0("~",nom1_areaeval)),
        as.formula(paste0("~",nom_estratos[[i]])),
        design = dmuestral,
        svymean,
        na.rm = TRUE
      ) %>% 
        setNames(c("estrato2","valor","error")) %>% 
        mutate(valor = redondear(valor,0),
               error = redondear(error,1)) %>% 
        mutate(estrato1_1 = nom_estratos[[i]],
               estrato1_2 = nom_estratos[[i]],
               tipo_esp = "Medida promedio",
               area_eval = nom_area) %>% 
        mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                TRUE ~ "Nivel de logro")) %>%
        mutate(año = str_sub(nom1_areaeval, -7, -4),
               grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                      nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                      nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                      TRUE ~ "Limpiar variable")) %>% 
        select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error) %>% 
        filter(!(grado_eval %in% "2.° grado de primaria" & año %in% c("2018","2023") & estrato1_1 %in% "nom_dre"))
      
      
      a2 <- svyby(
        as.formula(paste0("~",nom2_areaeval)),
        as.formula(paste0("~",nom_estratos[[i]])),
        design = dmuestral,
        svymean,
        na.rm = TRUE
      ) %>% 
        pivot_longer(
          cols = -!!sym(nom_estratos[[i]]),                                     # Todas las columnas excepto "sexo"
          names_to = c("categoria", "tipo_esp"),                  # Crear dos columnas: "categoria" y "niveles"
          names_pattern = "(se)?\\.?(.+)",                  # Captura el prefijo "se" opcionalmente
          values_drop_na = TRUE                             # Opcional: elimina valores NA si existen
        ) %>% 
        mutate(categoria = case_when(categoria %in% "se" ~ "error",
                                     TRUE ~ "valor")) %>%        # Asigna "valor" cuando "categoria" no tiene contenido
        pivot_wider(
          names_from = categoria,
          values_from = value
        ) %>% 
        mutate_at(vars(valor,error),
                  ~redondear(.*100,1)) %>% 
        mutate(tipo_esp = case_when(
          grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
          grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
          grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
          grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
          grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
          grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
          TRUE ~ "Limpiar variable"
        )) %>% 
        setNames(c("estrato2","tipo_esp","valor","error")) %>% 
        mutate(estrato1_1 = nom_estratos[[i]],
               estrato1_2 = nom_estratos[[i]],
               area_eval = nom_area) %>% 
        mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                TRUE ~ "Nivel de logro")) %>% 
        mutate(año = str_sub(nom1_areaeval, -7, -4),
               grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                      nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                      nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                      TRUE ~ "Limpiar variable")) %>% 
        select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error) %>% 
        filter(!(grado_eval %in% "2.° grado de primaria" & año %in% c("2018","2023") & estrato1_1 %in% "nom_dre"))
      
      
      estratos[[i]] <- rbind(a1,a2)
      
    }
    
    return(bind_rows(estratos))
    
  } else {
    
    if (areacurr == "Lectura") {
      
      nom_peso <- "peso_CT"
      nom_area <- "Lectura"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CT$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CT$")) %>% 
        names()
      
    } else if (areacurr == "Matemática") {
      
      nom_peso <- "peso_MA"
      nom_area <- "Matemática"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_MA$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_MA$")) %>% 
        names()
      
    } else if (areacurr == "Ciencias sociales") {
      
      nom_peso <- "peso_CS"
      nom_area <- "Ciencias sociales"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CS$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CS$")) %>% 
        names()
      
    } else if (areacurr == "Ciencia y tecnología") {
      
      nom_peso <- "peso_CN"
      nom_area <- "Ciencia y tecnología"
      nom1_areaeval <- bd_datos %>% 
        select(matches("^M500_.*_CN$")) %>% 
        names()
      nom2_areaeval <- bd_datos %>% 
        select(matches("^grupo_.*_CN$")) %>% 
        names()
      
    }
    
    nom_estratos <- c(alcance)
    
    bd1 <- bd_datos %>% 
      mutate(cod_mod8 = paste0(cod_mod7,anexo)) %>%
      filter(!is.na(!!sym(nom_peso))) %>% 
      mutate_at(vars(sexo),
                funs(as.character)) %>% 
      mutate(sexo = case_when(sexo %in% "1" ~ "Hombre",
                              sexo %in% "2" ~ "Mujer",
                              TRUE ~ sexo)) %>%
      filter(!is.na(nom_estratos))
    
    nom_strata <- bd1 %>% 
      select(starts_with("Estrato")) %>% 
      names()
    
    nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
    
    # Diseño muestral #
    #-----------------#
    
    options(survey.lonely.psu = "certainty")
    
    dmuestral <- svydesign(id=~cod_mod8,
                           strata=as.formula(paste0("~", nom_strata)),
                           nest=TRUE,
                           weights=as.formula(paste0("~", nom_peso)),
                           data=bd1,
                           pps = "brewer")
    
    # Cálculo de resultados #
    #-----------------------#
    
    estratos <- list()
    
    for(i in 1:length(nom_estratos)){
      
      a1 <- svyby(
        as.formula(paste0("~",nom1_areaeval)),
        as.formula(paste0("~",nom_estratos[[i]])),
        design = dmuestral,
        svymean,
        na.rm = TRUE
      ) %>% 
        setNames(c("estrato2","valor","error")) %>% 
        mutate(valor = redondear(valor,0),
               error = redondear(error,1)) %>% 
        mutate(estrato1_1 = nom_estratos[[i]],
               estrato1_2 = nom_estratos[[i]],
               tipo_esp = "Medida promedio",
               area_eval = nom_area) %>% 
        mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                TRUE ~ "Nivel de logro")) %>%
        mutate(año = str_sub(nom1_areaeval, -7, -4),
               grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                      nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                      nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                      TRUE ~ "Limpiar variable")) %>% 
        select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
      
      
      a2 <- svyby(
        as.formula(paste0("~",nom2_areaeval)),
        as.formula(paste0("~",nom_estratos[[i]])),
        design = dmuestral,
        svymean,
        na.rm = TRUE
      ) %>% 
        pivot_longer(
          cols = -!!sym(nom_estratos[[i]]),                                     # Todas las columnas excepto "sexo"
          names_to = c("categoria", "tipo_esp"),                  # Crear dos columnas: "categoria" y "niveles"
          names_pattern = "(se)?\\.?(.+)",                  # Captura el prefijo "se" opcionalmente
          values_drop_na = TRUE                             # Opcional: elimina valores NA si existen
        ) %>% 
        mutate(categoria = case_when(categoria %in% "se" ~ "error",
                                     TRUE ~ "valor")) %>%        # Asigna "valor" cuando "categoria" no tiene contenido
        pivot_wider(
          names_from = categoria,
          values_from = value
        ) %>% 
        mutate_at(vars(valor,error),
                  ~redondear(.*100,1)) %>% 
        mutate(tipo_esp = case_when(
          grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
          grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
          grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al Inicio"
          grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
          grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
          grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
          TRUE ~ "Limpiar variable"
        )) %>% 
        setNames(c("estrato2","tipo_esp","valor","error")) %>% 
        mutate(estrato1_1 = nom_estratos[[i]],
               estrato1_2 = nom_estratos[[i]],
               area_eval = nom_area) %>% 
        mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                TRUE ~ "Nivel de logro")) %>% 
        mutate(año = str_sub(nom1_areaeval, -7, -4),
               grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                      nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                      nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                      TRUE ~ "Limpiar variable")) %>% 
        select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
      
      
      estratos[[i]] <- rbind(a1,a2)
      
    }
    
    return(bind_rows(estratos))
  }
  
}

}

# Función que genera los gráficos tradicionales para las tablas de resultados nacionales #
#----------------------------------------------------------------------------------------#

graf_nac <- function(bd_datos){
  
  nom_grado <- unique(bd_datos$grado_eval)
  nom_area <- unique(bd_datos$area_eval)
  
  totniv <- bd_datos %>% 
    filter(tipo %in% "Nivel de logro") %>% 
    arrange(tipo_esp) %>% 
    select(tipo_esp) %>% 
    pull() %>% 
    length()
  
  bd1 <- bd_datos %>% 
    filter(tipo %in% "Nivel de logro") %>% 
    select(estrato2 ,tipo_esp,valor)
  
  if (totniv == 3) {
    
    # Cálculo de las posiciones de las etiquetas #
    #--------------------------------------------#
    
    pos <- bd1 %>% 
      pivot_wider(names_from = tipo_esp,
                  values_from = valor) %>% 
      rename(n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
      mutate(pos_sa=case_when(n_sa >= 12 ~  n_sa/2,
                              TRUE ~ n_sa + 11),
             pos_pr=n_pr/2,
             pos_in=case_when(n_in >= 12 ~ n_pr+n_in/2,
                              TRUE ~ n_pr+n_in/2 + 11)) %>% 
      mutate(pos_pr=pos_pr*(-1),
             pos_in=pos_in*(-1)) %>% 
      pivot_longer(cols = 5:7,
                   names_to = "nivel",
                   values_to = "posit") %>% 
      mutate(tipo_esp = case_when(nivel %in% "pos_in" ~ "En inicio",
                                  nivel %in% "pos_pr" ~ "En proceso",
                                  TRUE ~ "Satisfactorio")) %>% 
      select(estrato2,tipo_esp,posit)
    
    # Cálculo de la medida promedio #
    #-------------------------------#
    
    mp_etiq <- bd_datos %>% 
      filter(!tipo %in% "Nivel de logro") %>% 
      select(estrato2 ,tipo_esp,valor)
    
    # Integración de las bases de logros y posición de etiquetas #
    #------------------------------------------------------------#
    
    niveles <- bd1 %>% 
      left_join(pos, by = c("estrato2","tipo_esp")) %>% 
      mutate(etiq = puntocoma2(valor,1),
             tipo_esp=factor(tipo_esp,
                             levels=c("En inicio",
                                      "En proceso",
                                      "Satisfactorio"),
                             labels=c("En inicio",
                                      "En proceso",
                                      "Satisfactorio")),
             valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                               TRUE ~ valor))
    
    ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) + 
      geom_col(width = 0.17) +
      geom_segment(aes(x=0.8,
                       xend=1.2,
                       y=0, 
                       yend=0), 
                   color="#252525",
                   lwd = 0.2) +
      scale_y_continuous(limits = c(-100,100)) + 
      scale_fill_manual(values = c(color_inicio,color_proces,color_satisf)) + 
      theme_bw() +
      theme(panel.border = element_blank(),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank(),
            legend.text = element_text(size = 12,
                                       color = "#252525"),
            axis.title = element_blank(),
            axis.ticks = element_blank(),
            axis.text.y = element_blank(),
            axis.text.x = element_text(size = 12,
                                       color = "#252525"),
            plot.title = element_text(size = 15,
                                      color = "#252525",
                                      hjust = 0.5),
            plot.subtitle = element_text(size = 15,
                                         color = "#252525",
                                         hjust = 0.5)
      ) + 
      geom_text(aes(label = etiq,
                    y = posit),
                size = 4.5,
                color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                  TRUE ~ "#252525")) +
      geom_text(data = mp_etiq, 
                aes(label = valor, 
                    y = 90, 
                    x = 1), 
                size = 4.0, 
                inherit.aes = FALSE) +
      labs(title = nom_grado,
           subtitle = nom_area) +
      geom_text(aes(x=0.69,
                    y=0.00,
                    label="Niveles de logro (%)"),
                size=3.0,
                alpha=0.2,
                angle = 90,
                color = "#252525") +
      geom_text(mapping=aes(x=0.70,
                            y=90,
                            label="Medida \npromedio"),
                size=3.0,
                alpha=0.2,
                color = "#252525")
    
  } else if (totniv == 4) {
    
    # Cálculo de las posiciones de las etiquetas #
    #--------------------------------------------#
    
    pos <- bd1 %>% 
      pivot_wider(names_from = tipo_esp,
                  values_from = valor) %>% 
      rename(n_pi = `Previo al inicio`, n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
      mutate(pos_sa = case_when(n_sa >= 12 ~ n_sa/2,
                                TRUE ~ n_sa + 11),
             pos_pr = n_pr/2,
             pos_in = n_pr + n_in/2,
             pos_pi = case_when(n_pi >= 12 ~ n_pr + n_in + n_pi/2,
                                TRUE ~ n_pr + n_in + n_pi + 11)) %>%
      mutate(pos_pr = pos_pr*-1,
             pos_in = pos_in*-1,
             pos_pi = pos_pi*-1) %>% 
      pivot_longer(cols = 6:9,
                   names_to = "nivel",
                   values_to = "posit") %>% 
      mutate(tipo_esp = case_when(nivel %in% "pos_pi" ~ "Previo al inicio",
                                  nivel %in% "pos_in" ~ "En inicio",
                                  nivel %in% "pos_pr" ~ "En proceso",
                                  TRUE ~ "Satisfactorio")) %>% 
      select(estrato2,tipo_esp,posit)
    
    # Cálculo de la medida promedio #
    #-------------------------------#
    
    mp_etiq <- bd_datos %>% 
      filter(!tipo %in% "Nivel de logro") %>% 
      select(estrato2 ,tipo_esp,valor)
    
    # Integración de las bases de logros y posición de etiquetas #
    #------------------------------------------------------------#
    
    niveles <- bd1 %>% 
      left_join(pos, by = c("estrato2","tipo_esp")) %>% 
      mutate(etiq = puntocoma2(valor,1),
             tipo_esp=factor(tipo_esp,
                             levels=c("Previo al inicio",
                                      "En inicio",
                                      "En proceso",
                                      "Satisfactorio"),
                             labels=c("Previo al inicio",
                                      "En inicio",
                                      "En proceso",
                                      "Satisfactorio")),
             valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                               TRUE ~ valor))
    
    ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) + 
      geom_col(width = 0.17) +
      geom_segment(aes(x=0.8,
                       xend=1.2,
                       y=0, 
                       yend=0), 
                   color="#252525",
                   lwd = 0.2) +
      scale_y_continuous(limits = c(-100,100)) + 
      scale_fill_manual(values = c(color_pre_in,color_inicio,color_proces,color_satisf)) + 
      theme_bw() +
      theme(panel.border = element_blank(),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank(),
            legend.text = element_text(size = 12,
                                       color = "#252525"),
            axis.title = element_blank(),
            axis.ticks = element_blank(),
            axis.text.y = element_blank(),
            axis.text.x = element_text(size = 12,
                                       color = "#252525"),
            plot.title = element_text(size = 15,
                                      color = "#252525",
                                      hjust = 0.5),
            plot.subtitle = element_text(size = 15,
                                         color = "#252525",
                                         hjust = 0.5)
      ) + 
      geom_text(aes(label = etiq,
                    y = posit),
                size = 4.5,
                color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                  TRUE ~ "#252525")) +
      geom_text(data = mp_etiq, 
                aes(label = valor, 
                    y = 90, 
                    x = 1), 
                size = 4.0, 
                inherit.aes = FALSE) +
      labs(title = nom_grado,
           subtitle = nom_area) +
      geom_text(aes(x=0.69,
                    y=0.00,
                    label="Niveles de logro (%)"),
                size=3.0,
                alpha=0.2,
                angle = 90,
                color = "#252525") +
      geom_text(mapping=aes(x=0.70,
                            y=90,
                            label="Medida \npromedio"),
                size=3.0,
                alpha=0.2,
                color = "#252525")
    
    
    
  }
}

