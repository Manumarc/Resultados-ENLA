
# Conteo de missing en las variables #
#------------------------------------#

funmiss <- function(x) {
  
  sum(is.na(x))/length(x)*100
  
  }

# Patrón de missing #
#-------------------#

g_patron_missing <- function(data, preg){

  data[preg] %>%
    mutate(id = row_number()) %>%
    gather(-id, key = "key", value = "val") %>%
    mutate(isna = is.na(val)) %>%
    ggplot(aes(rev(key), id, fill = isna)) +
    geom_raster(alpha = 0.8) +
    theme_minimal() +
    theme(panel.grid = element_blank(),
          axis.text.y = element_text(size = 4.2, color = "black", hjust = 0),
          axis.text.x = element_blank(),
          legend.position = "bottom",
          axis.title = element_text(size = 8.5),
          legend.text = element_text(size = 8, color = "#5A5D63"),
          plot.margin = unit(c(0, 0, 0.0, 0), "cm")) +
    scale_fill_manual(name = "", values = c('gray', 'black'), labels = c("Presente", "Missing")) +
    labs(x = 'Pregunta\n', 
         y = "Observaciones", 
         title = " ",
         subtitle,
         captiomn) +
    scale_x_discrete(labels = rev(preg)) +
    coord_flip()

}

# Media pesada # 
#--------------#

weighted_mean <- function(x, w, ..., na.rm = FALSE){
  
  if(na.rm){
    
    df_omit <- na.omit(data.frame(x, w))
    
    return(weighted.mean(df_omit$x, df_omit$w, ...))
    
  } 
  
  weighted.mean(x, w, ...)
}

# Cálculo de la moda con pesos #
#------------------------------#

lamoda_pesos <- function(x, weights = NULL) {
  if (is.null(weights)) {
    u <- unique(x)
    tab <- tabulate(match(x, u))
    u[tab == max(tab)]
  } else {
    # Verificar que la longitud de 'x' y 'weights' sea la misma
    if (length(x) != length(weights)) {
      stop("La longitud de 'x' y 'weights' debe ser la misma.")
    }
    
    # Crear una tabla de frecuencia ponderada
    df <- data.frame(x, weights)
    df <- df[order(df$x), ]
    df <- df[!duplicated(df$x), ]
    df$weighted_freq <- ave(df$weights, df$x, FUN = sum)
    
    # Encontrar la moda basada en las frecuencias ponderadas
    moda <- df[df$weighted_freq == max(df$weighted_freq), "x"]
    moda
  }
}

# Redondear #
#-----------#

redondear<-function(x,d=0){
  (floor(x*10**d)+as.numeric((x*10**d-floor(x*10**d))>=0.5))/10**d
}

# Cambiar punto por coma decimal #
#--------------------------------#

puntocoma2<-function(x,dec=0){
  if(is.numeric(x)){
    if(length(dim(x))==2){
      gsub("\\.",",",apply(redondear(x,dec), 2, sprintf,fmt=paste0("%.",dec,"f")))
    }else{gsub("\\.",",",sprintf(paste0("%.",dec,"f"), redondear(x,dec)))}
  }else{
    if(length(dim(x))==2){
      redondear(apply(gsub(",","\\.",x),2,as.numeric),dec)
    }else{redondear(as.numeric(gsub(",","\\.",x)),dec)}
  }
  
} 

# Ver en Excel #
#--------------#

show_in_excel <- function(.data){
  tmp <- paste0(tempfile(),".xlsx")
  write.xlsx(.data,tmp)
  browseURL(url=tmp)
}

# Contar NA en las filas #
#------------------------#

rowSumsNA <- function(x) rowSums(is.na(x)) 

# Acortar oraciones en variables tipo factor #
#--------------------------------------------#

str_wrap_factor <- function(x, ...) {
  levels(x) <- str_wrap(levels(x), ...)
  x
}

# Colores UMC #
#-------------#

color_pre_in <- '#A5A5A5' # Color "Previo al inicio"
color_inicio <- '#A74D4B' # Color "En inicio"
color_proces <- '#F79646' # Color "En proceso"
color_satisf <- '#9BBB59' # Color "Satisfactorio"

# Función que calcula los resultados de rendimiento junto con sus errores estandar #
#----------------------------------------------------------------------------------#

tablares <- function(bd_datos,areacurr,alcance){
  
  
  conteo <- nchar(bd_datos %>% 
                    select(matches("^M500_.*_CT$")) %>% 
                    names()) %>% 
    as.numeric()
  
  if (conteo > 18) {
    
    # Censales
    
    if (alcance == "Nacional") {
      
      if (areacurr == "Lectura") {
        
        nom_peso <- "peso_CT"
        nom_area <- "Lectura"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CT$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CT$")) %>% 
          names()
        
      } else if (areacurr == "Matemática") {
        
        nom_peso <- "peso_MA"
        nom_area <- "Matemática"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_MA$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_MA$")) %>% 
          names()
        
      } else if (areacurr == "Ciencias sociales") {
        
        nom_peso <- "peso_CS"
        nom_area <- "Ciencias sociales"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CS$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CS$")) %>% 
          names()
        
      } else if (areacurr == "Ciencia y tecnología") {
        
        nom_peso <- "peso_CN"
        nom_area <- "Ciencia y tecnología"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CN$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CN$")) %>% 
          names()
        
      } 
      
      nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
      
      a1 <- bd_datos %>% 
        filter(!is.na(!!sym(nom2_areaeval))) %>% 
        group_by(!!sym(nom2_areaeval)) %>% 
        summarise(tot = sum(!!sym(nom_peso), na.rm = TRUE)) %>% 
        mutate(ptot = redondear(tot/sum(tot)*100,1)) %>% 
        select(-tot) %>% 
        setNames(c("tipo_esp","valor")) %>% 
        mutate(tipo_esp = case_when(
          grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
          grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
          grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
          grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
          grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
          grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
          TRUE ~ "Limpiar variable"
        ),
        area_eval = nom_area,
        estrato1_1 = alcance,
        estrato1_2 = alcance,
        estrato2 = alcance,
        error = NA) %>% 
        mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                TRUE ~ "Nivel de logro")) %>%
        mutate(año = str_sub(nom1_areaeval, -7, -4),
               grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                      nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                      nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                      nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                      TRUE ~ "Limpiar variable")) %>% 
        select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
      
      a2 <- bd_datos %>% 
        filter(!is.na(!!sym(nom2_areaeval))) %>% 
        mutate(nacional = alcance) %>% 
        group_by(nacional) %>% 
        summarise(valor = redondear(weighted_mean(!!sym(nom1_areaeval),!!sym(nom_peso),na.rm = TRUE),0)) %>% 
        setNames(c("tipo_esp","valor")) %>% 
        mutate(tipo_esp = case_when(
          grepl("^Nacional", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
          grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
          grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
          grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
          grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
          grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
          TRUE ~ "Limpiar variable"
        ),
        area_eval = nom_area,
        estrato1_1 = alcance,
        estrato1_2 = alcance,
        estrato2 = alcance,
        error = NA) %>% 
        mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                TRUE ~ "Nivel de logro")) %>%
        mutate(año = str_sub(nom1_areaeval, -7, -4),
               grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                      nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                      nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                      nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                      TRUE ~ "Limpiar variable")) %>% 
        select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
      
      return(rbind(a1,a2))
      
    } else if (alcance %in% "Estratos") {
      
      if (areacurr == "Lectura") {
        
        nom_peso <- "peso_CT"
        nom_area <- "Lectura"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CT$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CT$")) %>% 
          names()
        
      } else if (areacurr == "Matemática") {
        
        nom_peso <- "peso_MA"
        nom_area <- "Matemática"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_MA$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_MA$")) %>% 
          names()
        
      } else if (areacurr == "Ciencias sociales") {
        
        nom_peso <- "peso_CS"
        nom_area <- "Ciencias sociales"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CS$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CS$")) %>% 
          names()
        
      } else if (areacurr == "Ciencia y tecnología") {
        
        nom_peso <- "peso_CN"
        nom_area <- "Ciencia y tecnología"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CN$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CN$")) %>% 
          names()
        
      } 
      
      nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
      
      nom_estratos <- c("sexo","gestion2","gestion3","area","caracteristica2","nom_dre")
      
      estratos <- list()
      
      for(i in 1:length(nom_estratos)){
        
        b1 <- bd_datos %>% 
          filter(!is.na(!!sym(nom_peso))) %>% 
          mutate_at(vars(sexo),
                    funs(as.character)) %>% 
          mutate(sexo = case_when(sexo %in% "1" ~ "Hombre",
                                  sexo %in% "2" ~ "Mujer",
                                  TRUE ~ sexo)) %>% 
          mutate(gestion2 = case_when(gestion2 %in% c("Estatal","Público") ~ "Pública",
                                      gestion2 %in% c("No estatal","Privado") ~ "Privada",
                                      TRUE ~ gestion2)) %>%
          mutate(gestion3 = case_when(area %in% "Urbana" & gestion2 %in% "Pública" ~ "Pública urbana",
                                      gestion2 %in% "Privada" ~ "Privada",
                                      TRUE ~ NA_character_))
        
        a1 <- b1 %>% 
          filter(!is.na(!!sym(nom2_areaeval))) %>% 
          filter(!is.na(!!sym(nom_estratos[[i]]))) %>% 
          group_by(!!sym(nom_estratos[[i]]),!!sym(nom2_areaeval)) %>% 
          summarise(tot = sum(!!sym(nom_peso), na.rm = TRUE)) %>% 
          mutate(ptot = redondear(tot/sum(tot)*100,1)) %>% 
          select(-tot) %>% 
          setNames(c("estrato2","tipo_esp","valor")) %>% 
          mutate(tipo_esp = case_when(
            grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
            grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
            grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
            grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
            TRUE ~ "Limpiar variable"
          ),
          area_eval = nom_area,
          estrato1_1 = nom_estratos[[i]],
          estrato1_2 = nom_estratos[[i]],
          error = NA) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        a2 <- b1 %>% 
          filter(!is.na(!!sym(nom2_areaeval))) %>% 
          filter(!is.na(!!sym(nom_estratos[[i]]))) %>%
          group_by(!!sym(nom_estratos[[i]])) %>% 
          summarise(valor = redondear(weighted_mean(!!sym(nom1_areaeval), !!sym(nom_peso), na.rm = T),0)) %>% 
          setNames(c("estrato2","valor")) %>% 
          mutate(tipo_esp = "Medida promedio",
                 area_eval = nom_area,
                 estrato1_1 = nom_estratos[[i]],
                 estrato1_2 = nom_estratos[[i]],
                 error = NA) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        estratos[[i]] <- rbind(a1,a2)
        
      }
      
      return(bind_rows(estratos) %>% 
               filter(
                 !(grado_eval %in% "2.° grado de secundaria" & estrato1_1 %in% "caracteristica2")
               ))
      
    } else {
      
      if (areacurr == "Lectura") {
        
        nom_peso <- "peso_CT"
        nom_area <- "Lectura"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CT$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CT$")) %>% 
          names()
        
      } else if (areacurr == "Matemática") {
        
        nom_peso <- "peso_MA"
        nom_area <- "Matemática"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_MA$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_MA$")) %>% 
          names()
        
      } else if (areacurr == "Ciencias sociales") {
        
        nom_peso <- "peso_CS"
        nom_area <- "Ciencias sociales"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CS$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CS$")) %>% 
          names()
        
      } else if (areacurr == "Ciencia y tecnología") {
        
        nom_peso <- "peso_CN"
        nom_area <- "Ciencia y tecnología"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CN$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CN$")) %>% 
          names()
        
      } 
      
      nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
      
      nom_estratos <- c(alcance)
      
      estratos <- list()
      
      for(i in 1:length(nom_estratos)){
        
        b1 <- bd_datos %>% 
          filter(!is.na(!!sym(nom_peso))) %>% 
          mutate_at(vars(sexo),
                    funs(as.character)) %>% 
          mutate(sexo = case_when(sexo %in% "1" ~ "Hombre",
                                  sexo %in% "2" ~ "Mujer",
                                  TRUE ~ sexo))
        
        a1 <- b1 %>% 
          filter(!is.na(!!sym(nom2_areaeval))) %>% 
          filter(!is.na(!!sym(nom_estratos[[i]]))) %>% 
          group_by(!!sym(nom_estratos[[i]]),!!sym(nom2_areaeval)) %>% 
          summarise(tot = sum(!!sym(nom_peso), na.rm = TRUE)) %>% 
          mutate(ptot = redondear(tot/sum(tot)*100,1)) %>% 
          select(-tot) %>% 
          setNames(c("estrato2","tipo_esp","valor")) %>% 
          mutate(tipo_esp = case_when(
            grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
            grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
            grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
            grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
            TRUE ~ "Limpiar variable"
          ),
          area_eval = nom_area,
          estrato1_1 = nom_estratos[[i]],
          estrato1_2 = nom_estratos[[i]],
          error = NA) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        a2 <- b1 %>% 
          filter(!is.na(!!sym(nom2_areaeval))) %>% 
          mutate(nacional = "Nacional") %>% 
          group_by(!!sym(nom_estratos[[i]])) %>% 
          summarise(valor = redondear(weighted_mean(!!sym(nom1_areaeval),!!sym(nom_peso)),0)) %>% 
          setNames(c("estrato2","valor")) %>% 
          mutate(tipo_esp = "Medida promedio",
                 area_eval = nom_area,
                 estrato1_1 = nom_estratos[[i]],
                 estrato1_2 = nom_estratos[[i]],
                 error = NA) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        estratos[[i]] <- rbind(a1,a2)
        
      }
      
      return(bind_rows(estratos) %>% 
               filter(
                 !(grado_eval %in% "2.° grado de secundaria" & estrato1_1 %in% "caracteristica2")
               ))
      
    }
    
    
    # Muestrales
    
  } else { 
    
    
    # Filtros por área evaluada #
    #---------------------------#
    
    if (alcance == "Nacional") {
      
      if (areacurr == "Lectura") {
        
        nom_peso <- "peso_CT"
        nom_area <- "Lectura"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CT$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CT$")) %>% 
          names()
        
      } else if (areacurr == "Matemática") {
        
        nom_peso <- "peso_MA"
        nom_area <- "Matemática"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_MA$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_MA$")) %>% 
          names()
        
      } else if (areacurr == "Ciencias sociales") {
        
        nom_peso <- "peso_CS"
        nom_area <- "Ciencias sociales"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CS$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CS$")) %>% 
          names()
        
      } else if (areacurr == "Ciencia y tecnología") {
        
        nom_peso <- "peso_CN"
        nom_area <- "Ciencia y tecnología"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CN$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CN$")) %>% 
          names()
        
      } 
      
      bd1 <- bd_datos %>% 
        mutate(cod_mod8 = paste0(cod_mod7,anexo)) %>%
        filter(!is.na(!!sym(nom_peso)))
      
      nom_strata <- bd1 %>% 
        select(starts_with("Estrato")) %>% 
        names()
      
      nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
      
      # Diseño muestral #
      #-----------------#
      
      options(survey.lonely.psu = "certainty")
      
      dmuestral <- svydesign(id=~cod_mod8,
                             strata=as.formula(paste0("~", nom_strata)),
                             nest=TRUE,
                             weights=as.formula(paste0("~", nom_peso)),
                             data=bd1,
                             pps = "brewer")
      
      # Cálculo de resultados #
      #-----------------------#
      
      nom_vector <- c(nom1_areaeval,nom2_areaeval)
      
      nacional <- list()
      
      for (i in 1:length(nom_vector)) {
        
        nacional[[i]] <- lapply(nom_vector[[i]], function(var) {
          
          formula <- as.formula(paste0("~", var))  # Crear la fórmula
          
          resultado <- svymean(formula,
                               design = dmuestral, 
                               na.rm = TRUE) %>% 
            as.data.frame() %>% 
            rownames_to_column(var = "tipo_esp") %>%
            mutate(tipo_esp = case_when(
              grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
              grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
              grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
              grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
              grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
              grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
              TRUE ~ "Limpiar variable"
            ),
            area_eval = nom_area,
            estrato1_1 = alcance,
            estrato1_2 = alcance,
            estrato2 = alcance) %>% 
            mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                    TRUE ~ "Nivel de logro")) %>%
            mutate(año = str_sub(nom1_areaeval, -7, -4),
                   grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                          nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                          nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                          nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                          TRUE ~ "Limpiar variable")) %>% 
            setNames(c("tipo_esp", "valor", "error","area_eval","estrato1_1","estrato1_2","estrato2","tipo","año","grado_eval"))  # Renombrar columnas
          
          # Aquí aplicamos el redondeo basado en el índice fuera del `lapply`
          
          if (i == 1) {
            
            # Si es medida promedio, redondeamos "valor" a 0 decimales
            
            resultado <- resultado %>% 
              mutate(valor = redondear(valor, 0), 
                     error = redondear(error, 1))
            
          } else if (i == 2) {
            # Si es nivel de logro, redondeamos "valor" multiplicado por 100 a 1 decimal
            resultado <- resultado %>% 
              mutate(valor = redondear(valor*100, 1), 
                     error = redondear(error*100, 1))
          }
          
        })
        
      }  
      
      bd_int <- bind_rows(nacional) %>% 
        select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
      
      return(bd_int)
      
    } else if (alcance == "Estratos") {
      
      if (areacurr == "Lectura") {
        
        nom_peso <- "peso_CT"
        nom_area <- "Lectura"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CT$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CT$")) %>% 
          names()
        
      } else if (areacurr == "Matemática") {
        
        nom_peso <- "peso_MA"
        nom_area <- "Matemática"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_MA$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_MA$")) %>% 
          names()
        
      } else if (areacurr == "Ciencias sociales") {
        
        nom_peso <- "peso_CS"
        nom_area <- "Ciencias sociales"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CS$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CS$")) %>% 
          names()
        
      } else if (areacurr == "Ciencia y tecnología") {
        
        nom_peso <- "peso_CN"
        nom_area <- "Ciencia y tecnología"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CN$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CN$")) %>% 
          names()
        
      }
      
      bd1 <- bd_datos %>% 
        mutate(cod_mod8 = paste0(cod_mod7,anexo)) %>%
        filter(!is.na(!!sym(nom_peso))) %>% 
        mutate_at(vars(sexo),
                  funs(as.character)) %>% 
        mutate(sexo = case_when(sexo %in% "1" ~ "Hombre",
                                sexo %in% "2" ~ "Mujer",
                                sexo %in% c(" ","N") ~ NA_character_,
                                TRUE ~ sexo)) %>% 
        filter(!is.na(sexo)) %>% 
        mutate(gestion2 = case_when(gestion2 %in% c("Estatal","Público") ~ "Pública",
                                    gestion2 %in% c("No estatal","Privado") ~ "Privada",
                                    TRUE ~ gestion2)) %>% 
        mutate(gestion3 = case_when(area %in% "Urbana" & gestion2 %in% "Pública" ~ "Pública urbana",
                                    gestion2 %in% "Privada" ~ "Privada",
                                    TRUE ~ NA_character_))
      
      nom_strata <- bd1 %>% 
        select(starts_with("Estrato")) %>% 
        names()
      
      nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
      
      # Diseño muestral #
      #-----------------#
      
      options(survey.lonely.psu = "certainty")
      
      dmuestral <- svydesign(id=~cod_mod8,
                             strata=as.formula(paste0("~", nom_strata)),
                             nest=TRUE,
                             weights=as.formula(paste0("~", nom_peso)),
                             data=bd1,
                             pps = "brewer")
      
      # Cálculo de resultados #
      #-----------------------#
      
      nom_estratos <- c("sexo","gestion2","gestion3","area","caracteristica2","nom_dre")
      
      estratos <- list()
      
      for(i in 1:length(nom_estratos)){
        
        a1 <- svyby(
          as.formula(paste0("~",nom1_areaeval)),
          as.formula(paste0("~",nom_estratos[[i]])),
          design = dmuestral,
          svymean,
          na.rm = TRUE
        ) %>% 
          setNames(c("estrato2","valor","error")) %>% 
          mutate(valor = redondear(valor,0),
                 error = redondear(error,1)) %>% 
          mutate(estrato1_1 = nom_estratos[[i]],
                 estrato1_2 = nom_estratos[[i]],
                 tipo_esp = "Medida promedio",
                 area_eval = nom_area) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error) %>% 
          filter(!(grado_eval %in% "2.° grado de primaria" & año %in% c("2018","2023") & estrato1_1 %in% "nom_dre"))
        
        
        a2 <- svyby(
          as.formula(paste0("~",nom2_areaeval)),
          as.formula(paste0("~",nom_estratos[[i]])),
          design = dmuestral,
          svymean,
          na.rm = TRUE
        ) %>% 
          pivot_longer(
            cols = -!!sym(nom_estratos[[i]]),                       # Todas las columnas excepto "sexo"
            names_to = c("categoria", "tipo_esp"),                  # Crear dos columnas: "categoria" y "niveles"
            names_pattern = "(se)?\\.?(.+)",                        # Captura el prefijo "se" opcionalmente
            values_drop_na = TRUE                                   # Opcional: elimina valores NA si existen
          ) %>% 
          mutate(categoria = case_when(categoria %in% "se" ~ "error",
                                       TRUE ~ "valor")) %>%        # Asigna "valor" cuando "categoria" no tiene contenido
          pivot_wider(
            names_from = categoria,
            values_from = value
          ) %>% 
          mutate_at(vars(valor,error),
                    ~redondear(.*100,1)) %>% 
          mutate(tipo_esp = case_when(
            grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
            grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
            grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
            grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
            TRUE ~ "Limpiar variable"
          )) %>% 
          setNames(c("estrato2","tipo_esp","valor","error")) %>% 
          mutate(estrato1_1 = nom_estratos[[i]],
                 estrato1_2 = nom_estratos[[i]],
                 area_eval = nom_area) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>% 
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error) %>% 
          filter(!(grado_eval %in% "2.° grado de primaria" & año %in% c("2018","2023") & estrato1_1 %in% "nom_dre"))
        
        
        estratos[[i]] <- rbind(a1,a2)
        
      }
      
      return(bind_rows(estratos) %>% 
               filter(
                 !(grado_eval %in% "2.° grado de secundaria" & estrato1_1 %in% "caracteristica2")
               ))
      
    } else {
      
      if (areacurr == "Lectura") {
        
        nom_peso <- "peso_CT"
        nom_area <- "Lectura"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CT$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CT$")) %>% 
          names()
        
      } else if (areacurr == "Matemática") {
        
        nom_peso <- "peso_MA"
        nom_area <- "Matemática"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_MA$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_MA$")) %>% 
          names()
        
      } else if (areacurr == "Ciencias sociales") {
        
        nom_peso <- "peso_CS"
        nom_area <- "Ciencias sociales"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CS$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CS$")) %>% 
          names()
        
      } else if (areacurr == "Ciencia y tecnología") {
        
        nom_peso <- "peso_CN"
        nom_area <- "Ciencia y tecnología"
        nom1_areaeval <- bd_datos %>% 
          select(matches("^M500_.*_CN$")) %>% 
          names()
        nom2_areaeval <- bd_datos %>% 
          select(matches("^grupo_.*_CN$")) %>% 
          names()
        
      }
      
      nom_estratos <- c(alcance)
      
      bd1 <- bd_datos %>% 
        mutate(cod_mod8 = paste0(cod_mod7,anexo)) %>%
        filter(!is.na(!!sym(nom_peso))) %>% 
        mutate_at(vars(sexo),
                  funs(as.character)) %>% 
        mutate(sexo = case_when(sexo %in% "1" ~ "Hombre",
                                sexo %in% "2" ~ "Mujer",
                                TRUE ~ sexo)) %>%
        filter(!is.na(nom_estratos)) %>% 
        mutate(gestion2 = case_when(gestion2 %in% c("Estatal","Público") ~ "Pública",
                                    gestion2 %in% c("No estatal","Privado") ~ "Privada",
                                    TRUE ~ gestion2)) %>% 
        mutate(gestion3 = case_when(area %in% "Urbana" & gestion2 %in% c("Pública")  ~ "Pública urbana",
                                    gestion2 %in% c("Privada") ~ "Privada",
                                    TRUE ~ NA_character_))
      
      nom_strata <- bd1 %>% 
        select(starts_with("Estrato")) %>% 
        names()
      
      nom_gradoeval <- str_sub(nom1_areaeval, -10, -9)
      
      # Diseño muestral #
      #-----------------#
      
      options(survey.lonely.psu = "certainty")
      
      dmuestral <- svydesign(id=~cod_mod8,
                             strata=as.formula(paste0("~", nom_strata)),
                             nest=TRUE,
                             weights=as.formula(paste0("~", nom_peso)),
                             data=bd1,
                             pps = "brewer")
      
      # Cálculo de resultados #
      #-----------------------#
      
      estratos <- list()
      
      for(i in 1:length(nom_estratos)){
        
        a1 <- svyby(
          as.formula(paste0("~",nom1_areaeval)),
          as.formula(paste0("~",nom_estratos[[i]])),
          design = dmuestral,
          svymean,
          na.rm = TRUE
        ) %>% 
          setNames(c("estrato2","valor","error")) %>% 
          mutate(valor = redondear(valor,0),
                 error = redondear(error,1)) %>% 
          mutate(estrato1_1 = nom_estratos[[i]],
                 estrato1_2 = nom_estratos[[i]],
                 tipo_esp = "Medida promedio",
                 area_eval = nom_area) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>%
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        
        a2 <- svyby(
          as.formula(paste0("~",nom2_areaeval)),
          as.formula(paste0("~",nom_estratos[[i]])),
          design = dmuestral,
          svymean,
          na.rm = TRUE
        ) %>% 
          pivot_longer(
            cols = -!!sym(nom_estratos[[i]]),                                     # Todas las columnas excepto "sexo"
            names_to = c("categoria", "tipo_esp"),                  # Crear dos columnas: "categoria" y "niveles"
            names_pattern = "(se)?\\.?(.+)",                  # Captura el prefijo "se" opcionalmente
            values_drop_na = TRUE                             # Opcional: elimina valores NA si existen
          ) %>% 
          mutate(categoria = case_when(categoria %in% "se" ~ "error",
                                       TRUE ~ "valor")) %>%        # Asigna "valor" cuando "categoria" no tiene contenido
          pivot_wider(
            names_from = categoria,
            values_from = value
          ) %>% 
          mutate_at(vars(valor,error),
                    ~redondear(.*100,1)) %>% 
          mutate(tipo_esp = case_when(
            grepl("^M500_", tipo_esp) ~ "Medida promedio",                    # Usar grepl para verificar si comienza con "M500_"
            grepl("Previo al inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al inicio"
            grepl("Previo al Inicio$", tipo_esp) ~ "Previo al inicio",        # Usar grepl para verificar si termina con "Previo al Inicio"
            grepl("En inicio$", tipo_esp) ~ "En inicio",                      # Usar grepl para verificar si termina con "En inicio"
            grepl("En proceso$", tipo_esp) ~ "En proceso",                    # Usar grepl para verificar si termina con "En proceso"
            grepl("Satisfactorio$", tipo_esp) ~ "Satisfactorio",              # Usar grepl para verificar si termina con "Satisfactorio"
            TRUE ~ "Limpiar variable"
          )) %>% 
          setNames(c("estrato2","tipo_esp","valor","error")) %>% 
          mutate(estrato1_1 = nom_estratos[[i]],
                 estrato1_2 = nom_estratos[[i]],
                 area_eval = nom_area) %>% 
          mutate(tipo = case_when(tipo_esp %in% "Medida promedio" ~ "Medida promedio",
                                  TRUE ~ "Nivel de logro")) %>% 
          mutate(año = str_sub(nom1_areaeval, -7, -4),
                 grado_eval = case_when(nom_gradoeval %in% "2P" ~ "2.° grado de primaria",
                                        nom_gradoeval %in% "4P" ~ "4.° grado de primaria",
                                        nom_gradoeval %in% "6P" ~ "6.° grado de primaria",
                                        nom_gradoeval %in% "2S" ~ "2.° grado de secundaria",
                                        TRUE ~ "Limpiar variable")) %>% 
          select(grado_eval,area_eval,año,estrato1_1,estrato1_2,estrato2,tipo,tipo_esp,valor,error)
        
        
        estratos[[i]] <- rbind(a1,a2)
        
      }
      
      return(bind_rows(estratos) %>% 
               filter(
                 !(grado_eval %in% "2.° grado de secundaria" & estrato1_1 %in% "caracteristica2")
               ))
    }
    
  }
  
}

# Función que genera los gráficos tradicionales para las tablas de resultados nacionales #
#----------------------------------------------------------------------------------------#

graf_nac <- function(bd_datos){
  
  nom_grado <- unique(bd_datos$grado_eval)
  nom_area <- unique(bd_datos$area_eval)
  
  totniv <- bd_datos %>% 
    filter(tipo %in% "Nivel de logro") %>% 
    arrange(tipo_esp) %>% 
    select(tipo_esp) %>% 
    pull() %>% 
    length()
  
  bd1 <- bd_datos %>% 
    filter(tipo %in% "Nivel de logro") %>% 
    select(estrato2 ,tipo_esp,valor)
  
  if (totniv == 3) {
    
    # Cálculo de las posiciones de las etiquetas #
    #--------------------------------------------#
    
    pos <- bd1 %>% 
      pivot_wider(names_from = tipo_esp,
                  values_from = valor) %>% 
      rename(n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
      mutate(pos_sa=case_when(n_sa >= 12 ~  n_sa/2,
                              TRUE ~ n_sa + 11),
             pos_pr=n_pr/2,
             pos_in=case_when(n_in >= 12 ~ n_pr+n_in/2,
                              TRUE ~ n_pr+n_in/2 + 11)) %>% 
      mutate(pos_pr=pos_pr*(-1),
             pos_in=pos_in*(-1)) %>% 
      pivot_longer(cols = 5:7,
                   names_to = "nivel",
                   values_to = "posit") %>% 
      mutate(tipo_esp = case_when(nivel %in% "pos_in" ~ "En inicio",
                                  nivel %in% "pos_pr" ~ "En proceso",
                                  TRUE ~ "Satisfactorio")) %>% 
      select(estrato2,tipo_esp,posit)
    
    # Cálculo de la medida promedio #
    #-------------------------------#
    
    mp_etiq <- bd_datos %>% 
      filter(!tipo %in% "Nivel de logro") %>% 
      select(estrato2 ,tipo_esp,valor)
    
    # Integración de las bases de logros y posición de etiquetas #
    #------------------------------------------------------------#
    
    niveles <- bd1 %>% 
      left_join(pos, by = c("estrato2","tipo_esp")) %>% 
      mutate(etiq = puntocoma2(valor,1),
             tipo_esp=factor(tipo_esp,
                             levels=c("En inicio",
                                      "En proceso",
                                      "Satisfactorio"),
                             labels=c("En inicio",
                                      "En proceso",
                                      "Satisfactorio")),
             valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                               TRUE ~ valor))
    
    ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) + 
      geom_col(width = 0.17) +
      geom_segment(aes(x=0.8,
                       xend=1.2,
                       y=0, 
                       yend=0), 
                   color="#252525",
                   lwd = 0.2) +
      scale_y_continuous(limits = c(-100,100)) + 
      scale_fill_manual(values = c(color_inicio,color_proces,color_satisf)) + 
      theme_bw() +
      theme(panel.border = element_blank(),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank(),
            legend.text = element_text(size = 12,
                                       color = "#252525"),
            axis.title = element_blank(),
            axis.ticks = element_blank(),
            axis.text.y = element_blank(),
            axis.text.x = element_text(size = 12,
                                       color = "#252525"),
            plot.title = element_text(size = 15,
                                      color = "#252525",
                                      hjust = 0.5),
            plot.subtitle = element_text(size = 15,
                                         color = "#252525",
                                         hjust = 0.5)
      ) + 
      geom_text(aes(label = etiq,
                    y = posit),
                size = 4.5,
                color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                  TRUE ~ "#252525")) +
      geom_text(data = mp_etiq, 
                aes(label = valor, 
                    y = 90, 
                    x = 1), 
                size = 4.0, 
                inherit.aes = FALSE) +
      labs(title = nom_grado,
           subtitle = nom_area) +
      geom_text(aes(x=0.69,
                    y=0.00,
                    label="Niveles de logro (%)"),
                size=3.0,
                alpha=0.2,
                angle = 90,
                color = "#252525") +
      geom_text(mapping=aes(x=0.70,
                            y=90,
                            label="Medida \npromedio"),
                size=3.0,
                alpha=0.2,
                color = "#252525")
    
  } else if (totniv == 4) {
    
    # Cálculo de las posiciones de las etiquetas #
    #--------------------------------------------#
    
    pos <- bd1 %>% 
      pivot_wider(names_from = tipo_esp,
                  values_from = valor) %>% 
      rename(n_pi = `Previo al inicio`, n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
      mutate(pos_sa = case_when(n_sa >= 12 ~ n_sa/2,
                                TRUE ~ n_sa + 11),
             pos_pr = n_pr/2,
             pos_in = n_pr + n_in/2,
             pos_pi = case_when(n_pi >= 12 ~ n_pr + n_in + n_pi/2,
                                TRUE ~ n_pr + n_in + n_pi + 11)) %>%
      mutate(pos_pr = pos_pr*-1,
             pos_in = pos_in*-1,
             pos_pi = pos_pi*-1) %>% 
      pivot_longer(cols = 6:9,
                   names_to = "nivel",
                   values_to = "posit") %>% 
      mutate(tipo_esp = case_when(nivel %in% "pos_pi" ~ "Previo al inicio",
                                  nivel %in% "pos_in" ~ "En inicio",
                                  nivel %in% "pos_pr" ~ "En proceso",
                                  TRUE ~ "Satisfactorio")) %>% 
      select(estrato2,tipo_esp,posit)
    
    # Cálculo de la medida promedio #
    #-------------------------------#
    
    mp_etiq <- bd_datos %>% 
      filter(!tipo %in% "Nivel de logro") %>% 
      select(estrato2 ,tipo_esp,valor)
    
    # Integración de las bases de logros y posición de etiquetas #
    #------------------------------------------------------------#
    
    niveles <- bd1 %>% 
      left_join(pos, by = c("estrato2","tipo_esp")) %>% 
      mutate(etiq = puntocoma2(valor,1),
             tipo_esp=factor(tipo_esp,
                             levels=c("Previo al inicio",
                                      "En inicio",
                                      "En proceso",
                                      "Satisfactorio"),
                             labels=c("Previo al inicio",
                                      "En inicio",
                                      "En proceso",
                                      "Satisfactorio")),
             valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                               TRUE ~ valor))
    
    ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) + 
      geom_col(width = 0.17) +
      geom_segment(aes(x=0.8,
                       xend=1.2,
                       y=0, 
                       yend=0), 
                   color="#252525",
                   lwd = 0.2) +
      scale_y_continuous(limits = c(-100,100)) + 
      scale_fill_manual(values = c(color_pre_in,color_inicio,color_proces,color_satisf)) + 
      theme_bw() +
      theme(panel.border = element_blank(),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank(),
            legend.text = element_text(size = 12,
                                       color = "#252525"),
            axis.title = element_blank(),
            axis.ticks = element_blank(),
            axis.text.y = element_blank(),
            axis.text.x = element_text(size = 12,
                                       color = "#252525"),
            plot.title = element_text(size = 15,
                                      color = "#252525",
                                      hjust = 0.5),
            plot.subtitle = element_text(size = 15,
                                         color = "#252525",
                                         hjust = 0.5)
      ) + 
      geom_text(aes(label = etiq,
                    y = posit),
                size = 4.5,
                color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                  TRUE ~ "#252525")) +
      geom_text(data = mp_etiq, 
                aes(label = valor, 
                    y = 90, 
                    x = 1), 
                size = 4.0, 
                inherit.aes = FALSE) +
      labs(title = nom_grado,
           subtitle = nom_area) +
      geom_text(aes(x=0.69,
                    y=0.00,
                    label="Niveles de logro (%)"),
                size=3.0,
                alpha=0.2,
                angle = 90,
                color = "#252525") +
      geom_text(mapping=aes(x=0.70,
                            y=90,
                            label="Medida \npromedio"),
                size=3.0,
                alpha=0.2,
                color = "#252525")
  }
}

# Función que genera los gráficos de niveles de logro y medida promedio para estratos calculados #
#------------------------------------------------------------------------------------------------#

graf_estrat <- function(bd_nac, bd_estrat, nom_tipo){
  
  if (nom_tipo ==  "Tipo 1") {
    
    ###########################
    # EVALUACIONES MUESTRALES #
    ###########################
    
    if (sum(is.na(bd_nac$error)) == 0) {
      
      # Diferencia estadísticamente significativa en nivel satisfactorio dentro de los estratos #
      #-----------------------------------------------------------------------------------------#
      
      val_dif_mp <- bd_estrat %>% 
        filter(!estrato1_1 %in% c("nom_dre","caracteristica2") ) %>% 
        filter(!tipo %in% "Nivel de logro") %>% 
        select(estrato1_1,estrato2,tipo_esp,valor,error) %>% 
        select(-tipo_esp) %>% 
        pivot_wider(names_from = estrato2,
                    values_from = c(valor,error)) %>% 
        pivot_longer(
          cols = starts_with("valor") | starts_with("error"),
          names_to = c(".value", "grupo"),
          names_sep = "_"
        ) %>% 
        filter(!is.na(valor)) %>%  # Eliminar filas sin valores
        group_by(estrato1_1) %>%  # Asegurar estructura
        mutate(
          valor1 = valor[1],
          valor2 = valor[2],
          error1 = error[1],
          error2 = error[2]
        ) %>%
        select(estrato1_1, valor1, valor2, error1, error2) %>% 
        distinct() %>% 
        mutate(diferencia = valor1 - valor2) %>% 
        mutate(Zm = diferencia/(sqrt(error1^2 + error2^2))) %>% 
        mutate(pvalor =ifelse(Zm< 0, 2*pnorm(Zm),2*(1 - pnorm(Zm)))) %>% 
        mutate(dif_est_sig =ifelse(pvalor < 0.05,"Hay diferencia","Sin diferencia")) %>% 
        select(estrato1_1,dif_est_sig) 
      
      val_dif <- bd_estrat %>% 
        filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
        filter(tipo %in% "Nivel de logro") %>% 
        select(estrato1_1,estrato2,tipo_esp,valor,error) %>% 
        pivot_wider(names_from = estrato2,
                    values_from = c(valor,error)) %>% 
        pivot_longer(
          cols = starts_with("valor") | starts_with("error"),
          names_to = c(".value", "grupo"),
          names_sep = "_"
        ) %>% 
        filter(!is.na(valor)) %>%  # Eliminar filas sin valores
        group_by(estrato1_1) %>%  # Asegurar estructura
        mutate(
          valor1 = valor[1],
          valor2 = valor[2],
          error1 = error[1],
          error2 = error[2]
        ) %>%
        select(estrato1_1,tipo_esp, valor1, valor2, error1, error2) %>% 
        distinct() %>% 
        mutate(diferencia = valor1 - valor2) %>% 
        mutate(Zm = diferencia/(sqrt(error1^2 + error2^2))) %>% 
        mutate(pvalor =ifelse(Zm< 0, 2*pnorm(Zm),2*(1 - pnorm(Zm)))) %>% 
        mutate(dif_est_sig =ifelse(pvalor < 0.05,"Hay diferencia","Sin diferencia")) %>% 
        select(estrato1_1,tipo_esp,dif_est_sig)
      
      # Datos del grado y el área evaluada #
      #------------------------------------#
      
      nom_grado <- unique(bd_estrat$grado_eval)
      nom_area <- unique(bd_estrat$area_eval)
      
      # Total de niveles de logro #
      #---------------------------#
      
      totniv <- bd_estrat %>% 
        filter(tipo %in% "Nivel de logro") %>% 
        select(tipo_esp) %>%
        arrange(tipo_esp) %>%
        pull() %>% 
        unique() %>% 
        length()
      
      # Base de datos para generar gráfico #
      #------------------------------------#
      
      bd1 <- rbind(bd_nac,bd_estrat) %>% 
        filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
        filter(tipo %in% "Nivel de logro") %>% 
        select(estrato1_1,estrato2,tipo_esp,valor)
      
      if (totniv == 4) {
        
        # Cálculo de las posiciones de las etiquetas #
        #--------------------------------------------#
        
        pos <- bd1 %>% 
          pivot_wider(names_from = tipo_esp,
                      values_from = valor) %>% 
          rename(n_pi = `Previo al inicio`,n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
          mutate(pos_sa = case_when(n_sa >= 12 ~ n_sa/2,
                                    TRUE ~ n_sa + 11),
                 pos_pr = n_pr/2,
                 pos_in = n_pr + n_in/2,
                 pos_pi = case_when(n_pi >= 12 ~ n_pr + n_in + n_pi/2,
                                    TRUE ~ n_pr + n_in + n_pi + 11)) %>%
          mutate(pos_pr = pos_pr*-1,
                 pos_in = pos_in*-1,
                 pos_pi = pos_pi*-1) %>% 
          pivot_longer(cols = 7:10,
                       names_to = "nivel",
                       values_to = "posit") %>% 
          mutate(tipo_esp = case_when(nivel %in% "pos_pi" ~ "Previo al inicio",
                                      nivel %in% "pos_in" ~ "En inicio",
                                      nivel %in% "pos_pr" ~ "En proceso",
                                      TRUE ~ "Satisfactorio")) %>% 
          select(estrato1_1,estrato2,tipo_esp,posit)
        
        # Cálculo de la medida promedio #
        #-------------------------------#
        
        mp_etiq <- rbind(bd_nac,bd_estrat)%>% 
          filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
          filter(!tipo %in% "Nivel de logro") %>% 
          left_join(val_dif_mp, by = "estrato1_1") %>% 
          select(estrato1_1,estrato2,valor,dif_est_sig) %>% 
          mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                        estrato1_1 %in% "gestion2" ~ "Gestión",
                                        estrato1_1 %in% "area" ~ "Área",
                                        estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                        estrato1_1 %in% "Nacional" ~ "Nacional",
                                        TRUE ~ NA_character_)) %>% 
          mutate(estrato1_1 = factor(estrato1_1,
                                     levels = c("Nacional",
                                                "Sexo",
                                                "Gestión",
                                                "Área",
                                                "Gestión y área"))) %>% 
          mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                      TRUE ~ estrato2)) %>% 
          mutate(etiq = case_when(estrato2 %in% c("Mujer","Público","Urbana","Pública \nurbana") & dif_est_sig %in% "Hay diferencia" ~ paste0(puntocoma2(valor,0),"*"),
                                  TRUE ~ puntocoma2(valor,0)))
        
        # Integración de las bases de logros y posición de etiquetas #
        #------------------------------------------------------------#
        
        niveles <- bd1 %>% 
          left_join(pos, by = c("estrato1_1","estrato2","tipo_esp")) %>% 
          left_join(val_dif, by = c("estrato1_1","tipo_esp")) %>% 
          mutate(tipo_esp=factor(tipo_esp,
                                 levels=c("Previo al inicio",
                                          "En inicio",
                                          "En proceso",
                                          "Satisfactorio"),
                                 labels=c("Previo al inicio",
                                          "En inicio",
                                          "En proceso",
                                          "Satisfactorio"))) %>% 
          mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                        estrato1_1 %in% "gestion2" ~ "Gestión",
                                        estrato1_1 %in% "area" ~ "Área",
                                        estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                        estrato1_1 %in% "Nacional" ~ "Nacional",
                                        TRUE ~ NA_character_)) %>% 
          mutate(estrato1_1 = factor(estrato1_1,
                                     levels = c("Nacional",
                                                "Sexo",
                                                "Gestión",
                                                "Área",
                                                "Gestión y área"))) %>% 
          mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                      TRUE ~ estrato2)) %>% 
          mutate(estrato_num = as.numeric(as.factor(estrato1_1))) %>% 
          mutate(etiq = case_when(estrato2 %in% c("Mujer","Público","Urbana","Pública \nurbana") & dif_est_sig %in% "Hay diferencia" ~ paste0(puntocoma2(valor,1),"*"),
                                  TRUE ~ puntocoma2(valor,1)),
                 valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                                   TRUE ~ valor)
          )
        
        # Gráfico de niveles de logro y medida promedio #
        #-----------------------------------------------#
        
        ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) + 
          facet_wrap(vars(estrato1_1),
                     nrow = 1,
                     scales = "free_x") +
          geom_col(width = case_when(niveles$estrato1_1 %in% "Nacional" ~ 0.25,
                                     TRUE ~ 0.45)) +
          scale_y_continuous(limits = c(-100,100)) + 
          geom_segment(data = niveles %>% filter(!estrato1_1 %in% levels(estrato1_1)[1]),
                       aes(y = 0,
                           yend = 0,
                           x = 0.4,
                           xend = 2.6),
                       linetype = "solid",
                       color = "#252525",
                       lwd = 0.3,
                       alpha = 0.5) +
          geom_segment(data = niveles %>% filter(estrato1_1 %in% levels(estrato1_1)[1]),
                       aes(y = 0,
                           yend = 0,
                           x = 0.6,
                           xend = 1.6),
                       linetype = "solid",
                       color = "#252525",
                       lwd = 0.3,
                       alpha = 0.5) +
          scale_fill_manual(values = c(color_pre_in,color_inicio,color_proces,color_satisf)) + 
          theme_bw() +
          theme(
            panel.border = element_blank(),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank(),
            legend.text = element_text(size = 12,
                                       color = "#252525"),
            axis.title = element_blank(),
            axis.ticks = element_blank(),
            axis.text.y = element_blank(),
            axis.text.x = element_text(size = 12,
                                       color = "#252525"),
            plot.title = element_text(size = 15,
                                      color = "#252525",
                                      hjust = 0.5),
            plot.subtitle = element_text(size = 15,
                                         color = "#252525",
                                         hjust = 0.5),
            plot.caption = element_text(size = 8,
                                        color = "#252525",
                                        hjust = 0),
            panel.spacing = unit(0, "lines"),
            strip.background = element_rect(fill = "transparent",
                                            color = NA),
            strip.text = element_text(size = 15, 
                                      color = "#252525",
                                      hjust = 0.5)
          ) + 
          geom_text(aes(label = etiq,
                        y = posit),
                    size = 4.0,
                    color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                      TRUE ~ "#252525")) +
          geom_text(data = mp_etiq, 
                    aes(label = etiq, 
                        y = 90, 
                        x = estrato2), 
                    size = 4.0, 
                    inherit.aes = FALSE) +
          labs(title = nom_grado,
               subtitle = nom_area,
               caption = "(*) Diferencia estadísticamente significativa al 0,05 entre categorías del mismo estrato.") +
          geom_text(data = niveles %>% filter(estrato1_1 == levels(estrato1_1)[1]), 
                    aes(x=0.50,
                        y=0.00,
                        label="Niveles de logro (%)"),
                    size=2.8,
                    alpha=0.2,
                    angle = 90,
                    color = "#252525") +
          geom_text(data = niveles %>% filter(estrato1_1 == levels(estrato1_1)[1]), ,
                    mapping=aes(x=0.65,
                                y=90,
                                label="Medida \npromedio"),
                    size=2.8,
                    alpha=0.2,
                    color = "#252525") +
          geom_vline(data = niveles %>% filter(!estrato1_1 %in% "Gestión y área"),
                     aes(xintercept = c(2.6)), 
                     linetype = "dashed",
                     color = "#252525",
                     show.legend = F) +
          geom_vline(data = niveles %>% filter(estrato1_1 %in% "Nacional"),
                     aes(xintercept = c(1.6)), 
                     linetype = "dashed",
                     color = "#252525",
                     show.legend = F)
        
      } else if ( totniv == 3){
        
        # Cálculo de las posiciones de las etiquetas #
        #--------------------------------------------#
        
        pos <- bd1 %>% 
          pivot_wider(names_from = tipo_esp,
                      values_from = valor) %>% 
          rename(n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
          mutate(pos_sa=case_when(n_sa >= 12 ~  n_sa/2,
                                  TRUE ~ n_sa + 11),
                 pos_pr=n_pr/2,
                 pos_in=case_when(n_in >= 12 ~ n_pr+n_in/2,
                                  TRUE ~ n_pr+n_in/2 + 11)) %>% 
          mutate(pos_pr=pos_pr*(-1),
                 pos_in=pos_in*(-1)) %>% 
          pivot_longer(cols = 6:8,
                       names_to = "nivel",
                       values_to = "posit") %>% 
          mutate(tipo_esp = case_when(nivel %in% "pos_in" ~ "En inicio",
                                      nivel %in% "pos_pr" ~ "En proceso",
                                      TRUE ~ "Satisfactorio")) %>% 
          select(estrato1_1,estrato2,tipo_esp,posit)
        
        # Cálculo de la medida promedio #
        #-------------------------------#
        
        mp_etiq <- rbind(bd_nac,bd_estrat)%>% 
          filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
          filter(!tipo %in% "Nivel de logro") %>% 
          left_join(val_dif_mp, by = "estrato1_1") %>% 
          select(estrato1_1,estrato2,valor,dif_est_sig) %>% 
          mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                        estrato1_1 %in% "gestion2" ~ "Gestión",
                                        estrato1_1 %in% "area" ~ "Área",
                                        estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                        estrato1_1 %in% "Nacional" ~ "Nacional",
                                        TRUE ~ NA_character_)) %>% 
          mutate(estrato1_1 = factor(estrato1_1,
                                     levels = c("Nacional",
                                                "Sexo",
                                                "Gestión",
                                                "Área",
                                                "Gestión y área"))) %>% 
          mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                      TRUE ~ estrato2)) %>% 
          mutate(etiq = case_when(estrato2 %in% c("Mujer","Público","Urbana","Pública \nurbana") & dif_est_sig %in% "Hay diferencia" ~ paste0(puntocoma2(valor,0),"*"),
                                  TRUE ~ puntocoma2(valor,0)))
        
        # Integración de las bases de logros y posición de etiquetas #
        #------------------------------------------------------------#
        
        niveles <- bd1 %>% 
          left_join(pos, by = c("estrato1_1","estrato2","tipo_esp")) %>% 
          left_join(val_dif, by = c("estrato1_1","tipo_esp")) %>% 
          mutate(tipo_esp=factor(tipo_esp,
                                 levels=c("En inicio",
                                          "En proceso",
                                          "Satisfactorio"),
                                 labels=c("En inicio",
                                          "En proceso",
                                          "Satisfactorio"))) %>% 
          mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                        estrato1_1 %in% "gestion2" ~ "Gestión",
                                        estrato1_1 %in% "area" ~ "Área",
                                        estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                        estrato1_1 %in% "Nacional" ~ "Nacional",
                                        TRUE ~ NA_character_)) %>% 
          mutate(estrato1_1 = factor(estrato1_1,
                                     levels = c("Nacional",
                                                "Sexo",
                                                "Gestión",
                                                "Área",
                                                "Gestión y área"))) %>% 
          mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                      TRUE ~ estrato2)) %>% 
          mutate(estrato_num = as.numeric(as.factor(estrato1_1))) %>% 
          mutate(etiq = case_when(estrato2 %in% c("Mujer","Público","Urbana","Pública \nurbana") & dif_est_sig %in% "Hay diferencia" ~ paste0(puntocoma2(valor,1),"*"),
                                  TRUE ~ puntocoma2(valor,1)),
                 valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                                   TRUE ~ valor)
          )
        
        # Gráfico de niveles de logro y medida promedio #
        #-----------------------------------------------#
        
        ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) + 
          facet_wrap(vars(estrato1_1),
                     nrow = 1,
                     scales = "free_x") +
          geom_col(width = case_when(niveles$estrato1_1 %in% "Nacional" ~ 0.25,
                                     TRUE ~ 0.45)) +
          scale_y_continuous(limits = c(-100,100)) + 
          geom_segment(data = niveles %>% filter(!estrato1_1 %in% levels(estrato1_1)[1]),
                       aes(y = 0,
                           yend = 0,
                           x = 0.4,
                           xend = 2.6),
                       linetype = "solid",
                       color = "#252525",
                       lwd = 0.3,
                       alpha = 0.5) +
          geom_segment(data = niveles %>% filter(estrato1_1 %in% levels(estrato1_1)[1]),
                       aes(y = 0,
                           yend = 0,
                           x = 0.6,
                           xend = 1.6),
                       linetype = "solid",
                       color = "#252525",
                       lwd = 0.3,
                       alpha = 0.5) +
          scale_fill_manual(values = c(color_inicio,color_proces,color_satisf)) + 
          theme_bw() +
          theme(
            panel.border = element_blank(),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank(),
            legend.text = element_text(size = 12,
                                       color = "#252525"),
            axis.title = element_blank(),
            axis.ticks = element_blank(),
            axis.text.y = element_blank(),
            axis.text.x = element_text(size = 12,
                                       color = "#252525"),
            plot.title = element_text(size = 15,
                                      color = "#252525",
                                      hjust = 0.5),
            plot.subtitle = element_text(size = 15,
                                         color = "#252525",
                                         hjust = 0.5),
            plot.caption = element_text(size = 8,
                                        color = "#252525",
                                        hjust = 0),
            panel.spacing = unit(0, "lines"),
            strip.background = element_rect(fill = "transparent",
                                            color = NA),
            strip.text = element_text(size = 15, 
                                      color = "#252525",
                                      hjust = 0.5)
          ) + 
          geom_text(aes(label = etiq,
                        y = posit),
                    size = 4.0,
                    color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                      TRUE ~ "#252525")) +
          geom_text(data = mp_etiq, 
                    aes(label = etiq, 
                        y = 90, 
                        x = estrato2), 
                    size = 4.0, 
                    inherit.aes = FALSE) +
          labs(title = nom_grado,
               subtitle = nom_area,
               caption = "(*) Diferencia estadísticamente significativa al 0,05 entre categorías del mismo estrato.") +
          geom_text(data = niveles %>% filter(estrato1_1 == levels(estrato1_1)[1]), 
                    aes(x=0.50,
                        y=0.00,
                        label="Niveles de logro (%)"),
                    size=2.8,
                    alpha=0.2,
                    angle = 90,
                    color = "#252525") +
          geom_text(data = niveles %>% filter(estrato1_1 == levels(estrato1_1)[1]), ,
                    mapping=aes(x=0.65,
                                y=90,
                                label="Medida \npromedio"),
                    size=2.8,
                    alpha=0.2,
                    color = "#252525") +
          geom_vline(data = niveles %>% filter(!estrato1_1 %in% "Gestión y área"),
                     aes(xintercept = c(2.6)), 
                     linetype = "dashed",
                     color = "#252525",
                     show.legend = F) +
          geom_vline(data = niveles %>% filter(estrato1_1 %in% "Nacional"),
                     aes(xintercept = c(1.6)), 
                     linetype = "dashed",
                     color = "#252525",
                     show.legend = F)
      }
      
      #########################
      # EVALUACIONES CENSALES #
      #########################
      
    } else if (sum(is.na(bd_nac$error)) > 0){
      
      # Datos del grado y el área evaluada #
      #------------------------------------#
      
      nom_grado <- unique(bd_estrat$grado_eval)
      nom_area <- unique(bd_estrat$area_eval)
      
      # Total de niveles de logro #
      #---------------------------#
      
      totniv <- bd_estrat %>% 
        filter(tipo %in% "Nivel de logro") %>% 
        select(tipo_esp) %>%
        arrange(tipo_esp) %>%
        pull() %>% 
        unique() %>% 
        length()
      
      # Base de datos para generar gráfico #
      #------------------------------------#
      
      bd1 <- rbind(bd_nac,bd_estrat) %>% 
        filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
        filter(tipo %in% "Nivel de logro") %>% 
        select(estrato1_1,estrato2,tipo_esp,valor)
      
      if (totniv == 4) {
        
        # Cálculo de las posiciones de las etiquetas #
        #--------------------------------------------#
        
        pos <- bd1 %>% 
          pivot_wider(names_from = tipo_esp,
                      values_from = valor) %>% 
          rename(n_pi = `Previo al inicio`,n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
          mutate(pos_sa = case_when(n_sa >= 12 ~ n_sa/2,
                                    TRUE ~ n_sa + 11),
                 pos_pr = n_pr/2,
                 pos_in = n_pr + n_in/2,
                 pos_pi = case_when(n_pi >= 12 ~ n_pr + n_in + n_pi/2,
                                    TRUE ~ n_pr + n_in + n_pi + 11)) %>%
          mutate(pos_pr = pos_pr*-1,
                 pos_in = pos_in*-1,
                 pos_pi = pos_pi*-1) %>% 
          pivot_longer(cols = 7:10,
                       names_to = "nivel",
                       values_to = "posit") %>% 
          mutate(tipo_esp = case_when(nivel %in% "pos_pi" ~ "Previo al inicio",
                                      nivel %in% "pos_in" ~ "En inicio",
                                      nivel %in% "pos_pr" ~ "En proceso",
                                      TRUE ~ "Satisfactorio")) %>% 
          select(estrato1_1,estrato2,tipo_esp,posit)
        
        # Cálculo de la medida promedio #
        #-------------------------------#
        
        mp_etiq <- rbind(bd_nac,bd_estrat)%>% 
          filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
          filter(!tipo %in% "Nivel de logro") %>% 
          select(estrato1_1,estrato2,valor) %>% 
          mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                        estrato1_1 %in% "gestion2" ~ "Gestión",
                                        estrato1_1 %in% "area" ~ "Área",
                                        estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                        estrato1_1 %in% "Nacional" ~ "Nacional",
                                        TRUE ~ NA_character_)) %>% 
          mutate(estrato1_1 = factor(estrato1_1,
                                     levels = c("Nacional",
                                                "Sexo",
                                                "Gestión",
                                                "Área",
                                                "Gestión y área"))) %>% 
          mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                      TRUE ~ estrato2)) %>% 
          mutate(etiq = puntocoma2(valor,0))
        
        # Integración de las bases de logros y posición de etiquetas #
        #------------------------------------------------------------#
        
        niveles <- bd1 %>% 
          left_join(pos, by = c("estrato1_1","estrato2","tipo_esp")) %>% 
          mutate(tipo_esp=factor(tipo_esp,
                                 levels=c("Previo al inicio",
                                          "En inicio",
                                          "En proceso",
                                          "Satisfactorio"),
                                 labels=c("Previo al inicio",
                                          "En inicio",
                                          "En proceso",
                                          "Satisfactorio"))) %>% 
          mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                        estrato1_1 %in% "gestion2" ~ "Gestión",
                                        estrato1_1 %in% "area" ~ "Área",
                                        estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                        estrato1_1 %in% "Nacional" ~ "Nacional",
                                        TRUE ~ NA_character_)) %>% 
          mutate(estrato1_1 = factor(estrato1_1,
                                     levels = c("Nacional",
                                                "Sexo",
                                                "Gestión",
                                                "Área",
                                                "Gestión y área"))) %>% 
          mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                      TRUE ~ estrato2)) %>% 
          mutate(estrato_num = as.numeric(as.factor(estrato1_1))) %>% 
          mutate(etiq = puntocoma2(valor,1),
                 valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                                   TRUE ~ valor)
          )
        
        # Gráfico de niveles de logro y medida promedio #
        #-----------------------------------------------#
        
        ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) + 
          facet_wrap(vars(estrato1_1),
                     nrow = 1,
                     scales = "free_x") +
          geom_col(width = case_when(niveles$estrato1_1 %in% "Nacional" ~ 0.25,
                                     TRUE ~ 0.45)) +
          scale_y_continuous(limits = c(-100,100)) + 
          geom_segment(data = niveles %>% filter(!estrato1_1 %in% levels(estrato1_1)[1]),
                       aes(y = 0,
                           yend = 0,
                           x = 0.4,
                           xend = 2.6),
                       linetype = "solid",
                       color = "#252525",
                       lwd = 0.3,
                       alpha = 0.5) +
          geom_segment(data = niveles %>% filter(estrato1_1 %in% levels(estrato1_1)[1]),
                       aes(y = 0,
                           yend = 0,
                           x = 0.6,
                           xend = 1.6),
                       linetype = "solid",
                       color = "#252525",
                       lwd = 0.3,
                       alpha = 0.5) +
          scale_fill_manual(values = c(color_pre_in,color_inicio,color_proces,color_satisf)) + 
          theme_bw() +
          theme(
            panel.border = element_blank(),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank(),
            legend.text = element_text(size = 12,
                                       color = "#252525"),
            axis.title = element_blank(),
            axis.ticks = element_blank(),
            axis.text.y = element_blank(),
            axis.text.x = element_text(size = 12,
                                       color = "#252525"),
            plot.title = element_text(size = 15,
                                      color = "#252525",
                                      hjust = 0.5),
            plot.subtitle = element_text(size = 15,
                                         color = "#252525",
                                         hjust = 0.5),
            panel.spacing = unit(0, "lines"),
            strip.background = element_rect(fill = "transparent",
                                            color = NA),
            strip.text = element_text(size = 15, 
                                      color = "#252525",
                                      hjust = 0.5)
          ) + 
          geom_text(aes(label = etiq,
                        y = posit),
                    size = 4.0,
                    color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                      TRUE ~ "#252525")) +
          geom_text(data = mp_etiq, 
                    aes(label = etiq, 
                        y = 90, 
                        x = estrato2), 
                    size = 4.0, 
                    inherit.aes = FALSE) +
          labs(title = nom_grado,
               subtitle = nom_area) +
          geom_text(data = niveles %>% filter(estrato1_1 == levels(estrato1_1)[1]), 
                    aes(x=0.50,
                        y=0.00,
                        label="Niveles de logro (%)"),
                    size=2.8,
                    alpha=0.2,
                    angle = 90,
                    color = "#252525") +
          geom_text(data = niveles %>% filter(estrato1_1 == levels(estrato1_1)[1]), ,
                    mapping=aes(x=0.65,
                                y=90,
                                label="Medida \npromedio"),
                    size=2.8,
                    alpha=0.2,
                    color = "#252525") +
          geom_vline(data = niveles %>% filter(!estrato1_1 %in% "Gestión y área"),
                     aes(xintercept = c(2.6)), 
                     linetype = "dashed",
                     color = "#252525",
                     show.legend = F) +
          geom_vline(data = niveles %>% filter(estrato1_1 %in% "Nacional"),
                     aes(xintercept = c(1.6)), 
                     linetype = "dashed",
                     color = "#252525",
                     show.legend = F)
        
      } else if ( totniv == 3){
        
        # Cálculo de las posiciones de las etiquetas #
        #--------------------------------------------#
        
        pos <- bd1 %>% 
          pivot_wider(names_from = tipo_esp,
                      values_from = valor) %>% 
          rename(n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
          mutate(pos_sa=case_when(n_sa >= 12 ~  n_sa/2,
                                  TRUE ~ n_sa + 11),
                 pos_pr=n_pr/2,
                 pos_in=case_when(n_in >= 12 ~ n_pr+n_in/2,
                                  TRUE ~ n_pr+n_in/2 + 11)) %>% 
          mutate(pos_pr=pos_pr*(-1),
                 pos_in=pos_in*(-1)) %>% 
          pivot_longer(cols = 6:8,
                       names_to = "nivel",
                       values_to = "posit") %>% 
          mutate(tipo_esp = case_when(nivel %in% "pos_in" ~ "En inicio",
                                      nivel %in% "pos_pr" ~ "En proceso",
                                      TRUE ~ "Satisfactorio")) %>% 
          select(estrato1_1,estrato2,tipo_esp,posit)
        
        # Cálculo de la medida promedio #
        #-------------------------------#
        
        mp_etiq <- rbind(bd_nac,bd_estrat)%>% 
          filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
          filter(!tipo %in% "Nivel de logro") %>% 
          select(estrato1_1,estrato2,valor) %>% 
          mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                        estrato1_1 %in% "gestion2" ~ "Gestión",
                                        estrato1_1 %in% "area" ~ "Área",
                                        estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                        estrato1_1 %in% "Nacional" ~ "Nacional",
                                        TRUE ~ NA_character_)) %>% 
          mutate(estrato1_1 = factor(estrato1_1,
                                     levels = c("Nacional",
                                                "Sexo",
                                                "Gestión",
                                                "Área",
                                                "Gestión y área"))) %>% 
          mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                      TRUE ~ estrato2)) %>% 
          mutate(etiq = puntocoma2(valor,0))
        
        # Integración de las bases de logros y posición de etiquetas #
        #------------------------------------------------------------#
        
        niveles <- bd1 %>% 
          left_join(pos, by = c("estrato1_1","estrato2","tipo_esp")) %>% 
          mutate(tipo_esp=factor(tipo_esp,
                                 levels=c("En inicio",
                                          "En proceso",
                                          "Satisfactorio"),
                                 labels=c("En inicio",
                                          "En proceso",
                                          "Satisfactorio"))) %>% 
          mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                        estrato1_1 %in% "gestion2" ~ "Gestión",
                                        estrato1_1 %in% "area" ~ "Área",
                                        estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                        estrato1_1 %in% "Nacional" ~ "Nacional",
                                        TRUE ~ NA_character_)) %>% 
          mutate(estrato1_1 = factor(estrato1_1,
                                     levels = c("Nacional",
                                                "Sexo",
                                                "Gestión",
                                                "Área",
                                                "Gestión y área"))) %>% 
          mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                      TRUE ~ estrato2)) %>% 
          mutate(estrato_num = as.numeric(as.factor(estrato1_1))) %>% 
          mutate(etiq = puntocoma2(valor,1),
                 valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                                   TRUE ~ valor)
          )
        
        # Gráfico de niveles de logro y medida promedio #
        #-----------------------------------------------#
        
        ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) + 
          facet_wrap(vars(estrato1_1),
                     nrow = 1,
                     scales = "free_x") +
          geom_col(width = case_when(niveles$estrato1_1 %in% "Nacional" ~ 0.25,
                                     TRUE ~ 0.45)) +
          scale_y_continuous(limits = c(-100,100)) + 
          geom_segment(data = niveles %>% filter(!estrato1_1 %in% levels(estrato1_1)[1]),
                       aes(y = 0,
                           yend = 0,
                           x = 0.4,
                           xend = 2.6),
                       linetype = "solid",
                       color = "#252525",
                       lwd = 0.3,
                       alpha = 0.5) +
          geom_segment(data = niveles %>% filter(estrato1_1 %in% levels(estrato1_1)[1]),
                       aes(y = 0,
                           yend = 0,
                           x = 0.6,
                           xend = 1.6),
                       linetype = "solid",
                       color = "#252525",
                       lwd = 0.3,
                       alpha = 0.5) +
          scale_fill_manual(values = c(color_inicio,color_proces,color_satisf)) + 
          theme_bw() +
          theme(
            panel.border = element_blank(),
            panel.grid = element_blank(),
            legend.position = "bottom",
            legend.title = element_blank(),
            legend.text = element_text(size = 12,
                                       color = "#252525"),
            axis.title = element_blank(),
            axis.ticks = element_blank(),
            axis.text.y = element_blank(),
            axis.text.x = element_text(size = 12,
                                       color = "#252525"),
            plot.title = element_text(size = 15,
                                      color = "#252525",
                                      hjust = 0.5),
            plot.subtitle = element_text(size = 15,
                                         color = "#252525",
                                         hjust = 0.5),
            panel.spacing = unit(0, "lines"),
            strip.background = element_rect(fill = "transparent",
                                            color = NA),
            strip.text = element_text(size = 15, 
                                      color = "#252525",
                                      hjust = 0.5)
          ) + 
          geom_text(aes(label = etiq,
                        y = posit),
                    size = 4.0,
                    color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                      TRUE ~ "#252525")) +
          geom_text(data = mp_etiq, 
                    aes(label = etiq, 
                        y = 90, 
                        x = estrato2), 
                    size = 4.0, 
                    inherit.aes = FALSE) +
          labs(title = nom_grado,
               subtitle = nom_area) +
          geom_text(data = niveles %>% filter(estrato1_1 == levels(estrato1_1)[1]), 
                    aes(x=0.50,
                        y=0.00,
                        label="Niveles de logro (%)"),
                    size=2.8,
                    alpha=0.2,
                    angle = 90,
                    color = "#252525") +
          geom_text(data = niveles %>% filter(estrato1_1 == levels(estrato1_1)[1]), ,
                    mapping=aes(x=0.65,
                                y=90,
                                label="Medida \npromedio"),
                    size=2.8,
                    alpha=0.2,
                    color = "#252525") +
          geom_vline(data = niveles %>% filter(!estrato1_1 %in% "Gestión y área"),
                     aes(xintercept = c(2.6)), 
                     linetype = "dashed",
                     color = "#252525",
                     show.legend = F) +
          geom_vline(data = niveles %>% filter(estrato1_1 %in% "Nacional"),
                     aes(xintercept = c(1.6)), 
                     linetype = "dashed",
                     color = "#252525",
                     show.legend = F)
      }
    }

  } else if (nom_tipo == "Tipo 2") {
    
    ##############
    # MUESTRALES #
    ##############
    
    if (sum(is.na(bd_estrat$error)) == 0){
      
      val_dif_mp <- bd_estrat %>% 
        filter(tipo %in% "Medida promedio") %>% 
        filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
        select(estrato1_1,estrato2,tipo_esp,valor,error) %>% 
        select(-tipo_esp) %>% 
        pivot_wider(names_from = estrato2,
                    values_from = c(valor,error)) %>% 
        pivot_longer(
          cols = starts_with("valor") | starts_with("error"),
          names_to = c(".value", "grupo"),
          names_sep = "_"
        ) %>% 
        filter(!is.na(valor)) %>%  # Eliminar filas sin valores
        group_by(estrato1_1) %>%  # Asegurar estructura
        mutate(
          valor1 = valor[1],
          valor2 = valor[2],
          error1 = error[1],
          error2 = error[2]
        ) %>%
        select(estrato1_1, valor1, valor2, error1, error2) %>% 
        distinct() %>% 
        mutate(diferencia = valor1 - valor2) %>% 
        mutate(Zm = diferencia/(sqrt(error1^2 + error2^2))) %>% 
        mutate(pvalor =ifelse(Zm< 0, 2*pnorm(Zm),2*(1 - pnorm(Zm)))) %>% 
        mutate(dif_est_sig =ifelse(pvalor < 0.05,"Hay diferencia","Sin diferencia")) %>% 
        select(estrato1_1,dif_est_sig)
      
      temp1 <- bd_estrat %>% 
        filter(tipo %in% "Medida promedio") %>% 
        filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
        filter(!is.na(estrato2)) %>%
        left_join(val_dif_mp, by = "estrato1_1") %>% 
        mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                      estrato1_1 %in% "gestion2" ~ "Gestión",
                                      estrato1_1 %in% "area" ~ "Área",
                                      estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                      TRUE ~ NA_character_)) %>% 
        mutate(estrato1_1 = factor(estrato1_1,
                                   levels = c("Sexo",
                                              "Gestión",
                                              "Área",
                                              "Gestión y área"))) %>% 
        mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                    TRUE ~ estrato2)) %>% 
        mutate(etiq = case_when(estrato2 %in% c("Mujer","Pública","Urbana","Pública \nurbana") & dif_est_sig %in% "Hay diferencia" ~ paste0(puntocoma2(valor,0),"*"),
                                TRUE ~ puntocoma2(valor,0)))
      
      # Etiquetas de texto con los nombres de los niveles de logro #
      #------------------------------------------------------------#
      
      text_sat <- textGrob("Satisfactorio", 
                           gp = gpar(fontsize = 14, 
                                     col = color_satisf
                           ),
                           just = "left")
      text_pro <- textGrob("En proceso", 
                           gp = gpar(fontsize = 14, 
                                     col = color_proces
                           ),
                           just = "left")
      text_ini <- textGrob("En inicio", 
                           gp = gpar(fontsize = 14, 
                                     col = color_inicio
                           ),
                           just = "left")
      text_pin <- textGrob("Previo al inicio", 
                           gp = gpar(fontsize = 14, 
                                     col = color_pre_in
                           ),
                           just = "left")
      
      # Identificadores para filtros #
      #------------------------------#
      
      nom_gradoeval <- unique(temp1$grado_eval) # Identificador de grado evaluado
      nom_area <- unique(temp1$area_eval) # Identificador de área evaluada
      color_puntos <- c("#0570b0","#fe9929","#0570b0","#fe9929","#0570b0","#fe9929","#0570b0","#fe9929")
      
      if (nom_gradoeval %in% "2.° grado de primaria" & nom_area %in% "Lectura"){
        
        limites <- c(400,650)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(458.39, 583.66) # (Menor a 458.39; mayor o igual a 458.39 y menor a 583.66; Mayor o igual a 583.66)

        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (limites[[2]] - puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (limites[[2]] - puntos_corte[[2]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        annotation_pin <- NULL
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "2.° grado de primaria" & nom_area %in% "Matemática") {
        
        limites <- c(400,700)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(512.22, 639.21)
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (limites[[2]] - puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (limites[[2]] - puntos_corte[[2]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        annotation_pin <- NULL
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "4.° grado de primaria" & nom_area %in% "Lectura") {
        
        limites <- c(300,600)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(356.92, 444.72, 522.03)
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
        )
        annotation_pin <- annotation_custom(
          grob = text_pin,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_inicio,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "4.° grado de primaria" & nom_area %in% "Matemática") {
        
        limites <- c(300,600)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(351.90, 422.21, 526.46)

        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
        )
        annotation_pin <- annotation_custom(
          grob = text_pin,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_inicio,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "6.° grado de primaria" & nom_area %in% "Lectura") {
      
      limites <- c(400,650)
      limit_estrato <- "Gestión y área"
      puntos_corte <- c(445.46, 522.17, 579.14)
      
      annotation_sat <- annotation_custom(
        grob = text_sat,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
      ) 
      
      annotation_pro <- annotation_custom(
        grob = text_pro,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
      ) 
      
      annotation_ini <- annotation_custom(
        grob = text_ini,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
      )
      
      annotation_pin <- annotation_custom(
        grob = text_pin,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
      )
      
      hlines <- list(
        geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                   color = color_inicio,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                   color = color_proces,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                   color = color_satisf,
                   alpha = 0.5,
                   lwd = 0.2)
      )
      
    } else if (nom_gradoeval %in% "6.° grado de primaria" & nom_area %in% "Matemática") {
      
      limites <- c(400,650)
      limit_estrato <- "Gestión y área"
      puntos_corte <- c(432.32, 526.61, 603.41)
      
      annotation_sat <- annotation_custom(
        grob = text_sat,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
      ) 
      
      annotation_pro <- annotation_custom(
        grob = text_pro,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
      ) 
      
      annotation_ini <- annotation_custom(
        grob = text_ini,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
      )
      
      annotation_pin <- annotation_custom(
        grob = text_pin,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
      )
      
      hlines <- list(
        geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                   color = color_inicio,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                   color = color_proces,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                   color = color_satisf,
                   alpha = 0.5,
                   lwd = 0.2)
      )
      
    } else if (nom_gradoeval %in% "2.° grado de secundaria" & nom_area %in% "Lectura") {
        
        limites <- c(400,700)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(505.14, 580.61, 641.25)
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
        )
        annotation_pin <- annotation_custom(
          grob = text_pin,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_inicio,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "2.° grado de secundaria" & nom_area %in% "Matemática") {
        
        limites <- c(400,700)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(519.67, 595.96, 649.38)
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
        )
        annotation_pin <- annotation_custom(
          grob = text_pin,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_inicio,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "2.° grado de secundaria" & nom_area %in% "Ciencias sociales") {
      
      limites <- c(350,650)
      limit_estrato <- "Gestión y área"
      puntos_corte <- c(425.93, 500.05, 607.28)
      
      annotation_sat <- annotation_custom(
        grob = text_sat,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
      ) 
      annotation_pro <- annotation_custom(
        grob = text_pro,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
      ) 
      annotation_ini <- annotation_custom(
        grob = text_ini,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
      )
      annotation_pin <- annotation_custom(
        grob = text_pin,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
      )
      
      hlines <- list(
        geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                   color = color_inicio,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                   color = color_proces,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                   color = color_satisf,
                   alpha = 0.5,
                   lwd = 0.2)
      )
      
    } else if (nom_gradoeval %in% "2.° grado de secundaria" & nom_area %in% "Ciencia y tecnología") {
      
      limites <- c(300,700)
      limit_estrato <- "Gestión y área"
      puntos_corte <- c(374.60, 509.58, 628.48)
      
      annotation_sat <- annotation_custom(
        grob = text_sat,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
      ) 
      annotation_pro <- annotation_custom(
        grob = text_pro,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
      ) 
      annotation_ini <- annotation_custom(
        grob = text_ini,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
      )
      annotation_pin <- annotation_custom(
        grob = text_pin,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
      )
      
      hlines <- list(
        geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                   color = color_inicio,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                   color = color_proces,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                   color = color_satisf,
                   alpha = 0.5,
                   lwd = 0.2)
      )
      
    }
      # Gráfico #
      #---------#

      ggplot(temp1, aes(x = estrato2, y = valor, color = estrato2)) + 
        facet_wrap(vars(estrato1_1),
                   nrow = 1,
                   scales = "free_x") + 
        geom_errorbar(aes(x = estrato2,
                          ymin = valor - 1.96*error, 
                          ymax = valor + 1.96*error),
                      width = 0.13,
                      linewidth = 0.25) +
        geom_point(size = 1.5) + 
        hlines +
        scale_y_continuous(limits = limites,
                           breaks = c(redondear(puntos_corte,0))) +
        scale_color_manual(values = color_puntos) +
        theme_bw() + 
        theme(
          panel.border = element_blank(),
          panel.grid = element_blank(),
          panel.spacing = unit(0, "lines"),
          legend.position = "none",
          axis.title = element_blank(),
          axis.ticks = element_blank(),
          axis.text.x = element_text(size = 13,
                                     color = "#252525"),
          axis.text.y = element_text(size = 13,
                                     color = "#252525",
                                     vjust = 0.5),
          strip.background = element_rect(fill = "transparent",
                                          color = NA),
          strip.text = element_text(size = 15, 
                                    color = "#252525",
                                    hjust = 0.5),
          plot.margin = unit(c(0, 1.50, 0, 0.50), 
                             "inches"),
          plot.caption = element_text(size = 10,
                                      color = "#252525",
                                      hjust = 0,
                                      margin = margin(t = 18))
        ) + 
        geom_text(aes(label = etiq,
                      vjust = case_when(error >= 2.0 ~ 3.0 ,
                                        TRUE ~ 2.0)),
                  color = "#252525",
                  size = 4.5) + 
        geom_vline(data = temp1 %>% filter(!estrato1_1 %in% limit_estrato),
                   aes(xintercept = c(2.58)), 
                   linetype = "dashed",
                   lwd = 0.4,
                   color = "#252525",
                   alpha = 0.3,
                   show.legend = F) +
        annotation_sat +
        annotation_pro + 
        annotation_ini + 
        annotation_pin +
        coord_cartesian(clip = "off") +
        labs(caption = "(*) Diferencia estadísticamente significativa al 0,05 entre categorías del mismo estrato.")
      
      ############
      # CENSALES #
      ############
      
    } else if (sum(is.na(bd_estrat$error)) > 0){
      
      temp1 <- bd_estrat %>% 
        filter(tipo %in% "Medida promedio") %>% 
        filter(!estrato1_1 %in% c("nom_dre","caracteristica2")) %>% 
        filter(!is.na(estrato2)) %>%
        mutate(estrato1_1 = case_when(estrato1_1 %in% "sexo" ~ "Sexo",
                                      estrato1_1 %in% "gestion2" ~ "Gestión",
                                      estrato1_1 %in% "area" ~ "Área",
                                      estrato1_1 %in% "gestion3" ~ "Gestión y área",
                                      TRUE ~ NA_character_)) %>% 
        mutate(estrato1_1 = factor(estrato1_1,
                                   levels = c("Sexo",
                                              "Gestión",
                                              "Área",
                                              "Gestión y área"))) %>% 
        mutate(estrato2 = case_when(estrato2 %in% c("Pública urbana") ~ "Pública \nurbana",
                                    TRUE ~ estrato2)) %>% 
        mutate(etiq = puntocoma2(valor,0))
      
      # Etiquetas de texto con los nombres de los niveles de logro #
      #------------------------------------------------------------#
      
      text_sat <- textGrob("Satisfactorio", 
                           gp = gpar(fontsize = 14, 
                                     col = color_satisf
                           ),
                           just = "left")
      text_pro <- textGrob("En proceso", 
                           gp = gpar(fontsize = 14, 
                                     col = color_proces
                           ),
                           just = "left")
      text_ini <- textGrob("En inicio", 
                           gp = gpar(fontsize = 14, 
                                     col = color_inicio
                           ),
                           just = "left")
      text_pin <- textGrob("Previo al inicio", 
                           gp = gpar(fontsize = 14, 
                                     col = color_pre_in
                           ),
                           just = "left")
      
      # Identificadores para filtros #
      #------------------------------#
      
      nom_gradoeval <- unique(temp1$grado_eval) # Identificador de grado evaluado
      nom_area <- unique(temp1$area_eval) # Identificador de área evaluada
      color_puntos <- c("#0570b0","#fe9929","#0570b0","#fe9929","#0570b0","#fe9929","#0570b0","#fe9929")
      
      if (nom_gradoeval %in% "2.° grado de primaria" & nom_area %in% "Lectura"){
        
        limites <- c(400,650)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(458.39, 583.66) # (Menor a 458.39; mayor o igual a 458.39 y menor a 583.66; Mayor o igual a 583.66)
        
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (limites[[2]] - puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (limites[[2]] - puntos_corte[[2]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        annotation_pin <- NULL
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "2.° grado de primaria" & nom_area %in% "Matemática") {
        
        limites <- c(400,700)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(512.22, 639.21)
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (limites[[2]] - puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (limites[[2]] - puntos_corte[[2]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        annotation_pin <- NULL
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "4.° grado de primaria" & nom_area %in% "Lectura") {
        
        limites <- c(300,600)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(356.92, 444.72, 522.03)
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
        )
        annotation_pin <- annotation_custom(
          grob = text_pin,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_inicio,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "4.° grado de primaria" & nom_area %in% "Matemática") {
        
        limites <- c(300,600)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(351.90, 422.21, 526.46)
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
        )
        annotation_pin <- annotation_custom(
          grob = text_pin,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_inicio,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "6.° grado de primaria" & nom_area %in% "Lectura") {
      
      limites <- c(400,650)
      limit_estrato <- "Gestión y área"
      puntos_corte <- c(445.46, 522.17, 579.14)
      
      annotation_sat <- annotation_custom(
        grob = text_sat,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
      ) 
      
      annotation_pro <- annotation_custom(
        grob = text_pro,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
      ) 
      
      annotation_ini <- annotation_custom(
        grob = text_ini,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
      )
      
      annotation_pin <- annotation_custom(
        grob = text_pin,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
      )
      
      hlines <- list(
        geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                   color = color_inicio,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                   color = color_proces,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                   color = color_satisf,
                   alpha = 0.5,
                   lwd = 0.2)
      )
      
    } else if (nom_gradoeval %in% "6.° grado de primaria" & nom_area %in% "Matemática") {
      
      limites <- c(400,650)
      limit_estrato <- "Gestión y área"
      puntos_corte <- c(432.32, 526.61, 603.41)
      
      annotation_sat <- annotation_custom(
        grob = text_sat,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
      ) 
      
      annotation_pro <- annotation_custom(
        grob = text_pro,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
      ) 
      
      annotation_ini <- annotation_custom(
        grob = text_ini,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
      )
      
      annotation_pin <- annotation_custom(
        grob = text_pin,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
      )
      
      hlines <- list(
        geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                   color = color_inicio,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                   color = color_proces,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                   color = color_satisf,
                   alpha = 0.5,
                   lwd = 0.2)
      )
      
    } else if (nom_gradoeval %in% "2.° grado de secundaria" & nom_area %in% "Lectura") {
        
        limites <- c(400,700)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(505.14, 580.61, 641.25)
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
        )
        annotation_pin <- annotation_custom(
          grob = text_pin,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_inicio,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "2.° grado de secundaria" & nom_area %in% "Matemática") {
        
        limites <- c(400,700)
        limit_estrato <- "Gestión y área"
        puntos_corte <- c(519.67, 595.96, 649.38)
        
        annotation_sat <- annotation_custom(
          grob = text_sat,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
        ) 
        annotation_pro <- annotation_custom(
          grob = text_pro,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
        ) 
        annotation_ini <- annotation_custom(
          grob = text_ini,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
        )
        annotation_pin <- annotation_custom(
          grob = text_pin,
          xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
          ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
        )
        
        hlines <- list(
          geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                     color = color_inicio,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                     color = color_proces,
                     alpha = 0.5,
                     lwd = 0.2),
          geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                     color = color_satisf,
                     alpha = 0.5,
                     lwd = 0.2)
        )
        
      } else if (nom_gradoeval %in% "2.° grado de secundaria" & nom_area %in% "Ciencias sociales") {
      
      limites <- c(350,650)
      limit_estrato <- "Gestión y área"
      puntos_corte <- c(425.93, 500.05, 607.28)
      
      annotation_sat <- annotation_custom(
        grob = text_sat,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
      ) 
      annotation_pro <- annotation_custom(
        grob = text_pro,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
      ) 
      annotation_ini <- annotation_custom(
        grob = text_ini,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
      )
      annotation_pin <- annotation_custom(
        grob = text_pin,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
      )
      
      hlines <- list(
        geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                   color = color_inicio,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                   color = color_proces,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                   color = color_satisf,
                   alpha = 0.5,
                   lwd = 0.2)
      )
      
    } else if (nom_gradoeval %in% "2.° grado de secundaria" & nom_area %in% "Ciencia y tecnología") {
      
      limites <- c(300,700)
      limit_estrato <- "Gestión y área"
      puntos_corte <- c(374.60, 509.58, 628.48)
      
      annotation_sat <- annotation_custom(
        grob = text_sat,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 , ymax = puntos_corte[[3]] + (limites[[2]] - puntos_corte[[3]])/2 
      ) 
      annotation_pro <- annotation_custom(
        grob = text_pro,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 , ymax = puntos_corte[[2]] + (puntos_corte[[3]]- puntos_corte[[2]])/2 
      ) 
      annotation_ini <- annotation_custom(
        grob = text_ini,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2 , ymax = puntos_corte[[1]] + (puntos_corte[[2]]- puntos_corte[[1]])/2
      )
      annotation_pin <- annotation_custom(
        grob = text_pin,
        xmin = 5.2, xmax = 0, # Ajustar para que esté después del último facet
        ymin = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2 , ymax = limites[[1]] + (puntos_corte[[1]]- limites[[1]])/2
      )
      
      hlines <- list(
        geom_hline(yintercept = redondear(puntos_corte[[1]], 0),
                   color = color_inicio,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[2]], 0),
                   color = color_proces,
                   alpha = 0.5,
                   lwd = 0.2),
        geom_hline(yintercept = redondear(puntos_corte[[3]], 0),
                   color = color_satisf,
                   alpha = 0.5,
                   lwd = 0.2)
      )
      
    }
      # Gráfico #
      #---------#

      ggplot(temp1, aes(x = estrato2, y = valor, color = estrato2)) + 
        facet_wrap(vars(estrato1_1),
                   nrow = 1,
                   scales = "free_x") +
        geom_point(size = 1.5) + 
        hlines +
        scale_y_continuous(limits = limites,
                           breaks = c(redondear(puntos_corte,0))) +
        scale_color_manual(values = color_puntos) +
        theme_bw() + 
        theme(
          panel.border = element_blank(),
          panel.grid = element_blank(),
          panel.spacing = unit(0, "lines"),
          legend.position = "none",
          axis.title = element_blank(),
          axis.ticks = element_blank(),
          axis.text.x = element_text(size = 13,
                                     color = "#252525"),
          axis.text.y = element_text(size = 13,
                                     color = "#252525",
                                     vjust = 0.5),
          strip.background = element_rect(fill = "transparent",
                                          color = NA),
          strip.text = element_text(size = 15, 
                                    color = "#252525",
                                    hjust = 0.5),
          plot.margin = unit(c(0, 1.50, 0, 0.50), 
                             "inches")
        ) + 
        geom_text(aes(label = etiq,
                      vjust = 2.0),
                  color = "#252525",
                  size = 4.5) + 
        geom_vline(data = temp1 %>% filter(!estrato1_1 %in% limit_estrato),
                   aes(xintercept = c(2.58)), 
                   linetype = "dashed",
                   lwd = 0.4,
                   color = "#252525",
                   alpha = 0.3,
                   show.legend = F) +
        annotation_sat +
        annotation_pro + 
        annotation_ini + 
        annotation_pin +
        coord_cartesian(clip = "off")
      
    } 
    
  } else if (nom_tipo == "Tipo 3") {
    
    # Total de niveles de logro #
    #---------------------------#
    
    totniv <- bd_estrat %>% 
      filter(tipo %in% "Nivel de logro") %>% 
      select(tipo_esp) %>%
      arrange(tipo_esp) %>%
      pull() %>% 
      unique() %>% 
      length()
    
    # Niveles de logro #
    #------------------#
    
    bd1 <- rbind(bd_nac,bd_estrat) %>% 
      filter(tipo %in% "Nivel de logro") %>% 
      filter(estrato1_1 %in% c("nom_dre","Nacional")) %>% 
      select(estrato2,tipo_esp,valor) %>% 
      mutate(estrato2 = str_replace_all(estrato2, " ","")) %>% 
      mutate(estrato2 = case_when(estrato2 %in% "LaLibertad" ~ "La Libertad",
                                  estrato2 %in% "LimaMetropolitana" ~ "Lima Metropolitana",
                                  estrato2 %in% "LimaProvincias" ~ "Lima Provincias",
                                  estrato2 %in% "MadredeDios" ~ "Madre de Dios",
                                  estrato2 %in% "SanMartín" ~ "San Martín",
                                  TRUE ~ estrato2))
    
    # Cálculo de la medida promedio #
    #-------------------------------#
    
    mp_etiq <- rbind(bd_nac,bd_estrat)  %>% 
      filter(!tipo %in% "Nivel de logro") %>% 
      filter(estrato1_1 %in% c("nom_dre","Nacional")) %>%  
      select(estrato2 ,tipo_esp,valor) %>% 
      mutate(estrato2 = str_replace_all(estrato2, " ","")) %>% 
      mutate(estrato2 = case_when(estrato2 %in% "LaLibertad" ~ "La Libertad",
                                  estrato2 %in% "LimaMetropolitana" ~ "Lima Metropolitana",
                                  estrato2 %in% "LimaProvincias" ~ "Lima Provincias",
                                  estrato2 %in% "MadredeDios" ~ "Madre de Dios",
                                  estrato2 %in% "SanMartín" ~ "San Martín",
                                  TRUE ~ estrato2))
    
    if (totniv == 4) {
      
      # Posiciones de etiquetas #
      #-------------------------#
      
      pos <- bd1 %>% 
        pivot_wider(names_from = tipo_esp,
                    values_from = valor) %>% 
        rename(n_pi = `Previo al inicio`, n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
        mutate(pos_sa = case_when(n_sa >= 9 ~ n_sa/2,
                                  TRUE ~ n_sa + 8),
               pos_pr = n_pr/2,
               pos_in = n_pr + n_in/2,
               pos_pi = case_when(n_pi >= 9 ~ n_pr + n_in + n_pi/2,
                                  TRUE ~ n_pr + n_in + n_pi + 8)) %>%
        mutate(pos_pr = pos_pr*-1,
               pos_in = pos_in*-1,
               pos_pi = pos_pi*-1) %>% 
        pivot_longer(cols = 6:9,
                     names_to = "nivel",
                     values_to = "posit") %>% 
        mutate(tipo_esp = case_when(nivel %in% "pos_pi" ~ "Previo al inicio",
                                    nivel %in% "pos_in" ~ "En inicio",
                                    nivel %in% "pos_pr" ~ "En proceso",
                                    TRUE ~ "Satisfactorio")) %>% 
        select(estrato2,tipo_esp,posit) 
      
      # Integración de las bases de logros y posición de etiquetas #
      #------------------------------------------------------------#
      
      niveles <- bd1 %>% 
        left_join(pos, by = c("estrato2","tipo_esp")) %>% 
        mutate(etiq = puntocoma2(valor,1),
               tipo_esp=factor(tipo_esp,
                               levels=c("Previo al inicio",
                                        "En inicio",
                                        "En proceso",
                                        "Satisfactorio"),
                               labels=c("Previo al inicio",
                                        "En inicio",
                                        "En proceso",
                                        "Satisfactorio")),
               valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                                 TRUE ~ valor)) %>% 
        mutate(estrato2 = str_replace_all(estrato2, " ","")) %>% 
        mutate(estrato2 = case_when(estrato2 %in% "LaLibertad" ~ "La Libertad",
                                    estrato2 %in% "LimaMetropolitana" ~ "Lima Metropolitana",
                                    estrato2 %in% "LimaProvincias" ~ "Lima Provincias",
                                    estrato2 %in% "MadredeDios" ~ "Madre de Dios",
                                    estrato2 %in% "SanMartín" ~ "San Martín",
                                    TRUE ~ estrato2))
      
      # Gráfico #
      #---------#
      
      reg1 <- niveles %>% 
        select(estrato2) %>% 
        filter(!estrato2 %in% "Nacional") %>% 
        unique() %>% 
        pull()
      
      orden1 <- c("Nacional",reg1)
      
      ggplot(niveles, aes(x = factor(estrato2, levels = orden1), y=valor, fill = tipo_esp)) + 
        geom_col(width = 0.77) +
        coord_cartesian(ylim = c(-100, 100),
                        clip = "off") +
        geom_segment(aes(x=0.5,
                         xend=27.5,
                         y=0, 
                         yend=0), 
                     color="#252525",
                     lwd = 0.2) +
        annotate("segment",
                 x = 1.5,
                 xend = 1.5,
                 y = -200,  
                 yend = 100,  
                 linetype = "dashed",
                 color = "#6baed6",
                 lwd = 0.3) +  
        scale_fill_manual(values = c(color_pre_in,color_inicio,color_proces,color_satisf)) +
        theme_bw() +
        theme(panel.border = element_blank(),
              panel.grid = element_blank(),
              legend.position = "bottom",
              legend.title = element_blank(),
              legend.text = element_text(size = 12,
                                         color = "#252525"),
              axis.title = element_blank(),
              axis.ticks = element_blank(),
              axis.text.y = element_blank(),
              axis.text.x = element_text(size = 12,
                                         color = "#252525",
                                         angle = 90,
                                         hjust = 1,
                                         vjust = 0.5)
        ) +
        geom_text(aes(label = etiq,
                      y = posit),
                  size = 3.5,
                  color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 9 ~ "white",
                                    TRUE ~ "#252525")) + 
        geom_text(data = mp_etiq, 
                  aes(label = valor, 
                      y = 90, 
                      x = estrato2), 
                  size = 4.0, 
                  inherit.aes = FALSE) 
      
      
    } else if (totniv == 3){
      
      # Posiciones de etiquetas #
      #-------------------------#
      
      pos <- bd1 %>% 
        pivot_wider(names_from = tipo_esp,
                    values_from = valor) %>% 
        rename(n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
        mutate(pos_sa = case_when(n_sa >= 9 ~ n_sa/2,
                                  TRUE ~ n_sa + 8),
               pos_pr = n_pr/2,
               pos_in = case_when(n_in >= 9 ~ n_pr + n_in/2,
                                  TRUE ~ n_pr + n_in/2 + 8)) %>%
        mutate(pos_pr = pos_pr*-1,
               pos_in = pos_in*-1) %>% 
        pivot_longer(cols = 5:7,
                     names_to = "nivel",
                     values_to = "posit") %>% 
        mutate(tipo_esp = case_when(nivel %in% "pos_in" ~ "En inicio",
                                    nivel %in% "pos_pr" ~ "En proceso",
                                    TRUE ~ "Satisfactorio")) %>% 
        select(estrato2,tipo_esp,posit)
      
      # Integración de las bases de logros y posición de etiquetas #
      #------------------------------------------------------------#
      
      niveles <- bd1 %>% 
        left_join(pos, by = c("estrato2","tipo_esp")) %>% 
        mutate(etiq = puntocoma2(valor,1),
               tipo_esp=factor(tipo_esp,
                               levels=c("En inicio",
                                        "En proceso",
                                        "Satisfactorio"),
                               labels=c("En inicio",
                                        "En proceso",
                                        "Satisfactorio")),
               valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                                 TRUE ~ valor)) %>% 
        mutate(estrato2 = str_replace_all(estrato2, " ","")) %>% 
        mutate(estrato2 = case_when(estrato2 %in% "LaLibertad" ~ "La Libertad",
                                    estrato2 %in% "LimaMetropolitana" ~ "Lima Metropolitana",
                                    estrato2 %in% "LimaProvincias" ~ "Lima Provincias",
                                    estrato2 %in% "MadredeDios" ~ "Madre de Dios",
                                    estrato2 %in% "SanMartín" ~ "San Martín",
                                    TRUE ~ estrato2))
      
      # Gráfico #
      #---------#
      
      reg1 <- niveles %>% 
        select(estrato2) %>% 
        filter(!estrato2 %in% "Nacional") %>% 
        unique() %>% 
        pull()
      
      orden1 <- c("Nacional",reg1)
      
      ggplot(niveles, aes(x = factor(estrato2, levels = orden1), y=valor, fill = tipo_esp)) + 
        geom_col(width = 0.77) +
        coord_cartesian(ylim = c(-100, 100),
                        clip = "off") +
        geom_segment(aes(x=0.5,
                         xend=27.5,
                         y=0, 
                         yend=0), 
                     color="#252525",
                     lwd = 0.2) +
        annotate("segment",
                 x = 1.5,
                 xend = 1.5,
                 y = -200,  
                 yend = 100,  
                 linetype = "dashed",
                 color = "#6baed6",
                 lwd = 0.3) +  
        scale_fill_manual(values = c(color_inicio,color_proces,color_satisf)) +
        theme_bw() +
        theme(panel.border = element_blank(),
              panel.grid = element_blank(),
              legend.position = "bottom",
              legend.title = element_blank(),
              legend.text = element_text(size = 12,
                                         color = "#252525"),
              axis.title = element_blank(),
              axis.ticks = element_blank(),
              axis.text.y = element_blank(),
              axis.text.x = element_text(size = 12,
                                         color = "#252525",
                                         angle = 90,
                                         hjust = 1,
                                         vjust = 0.5)
        ) +
        geom_text(aes(label = etiq,
                      y = posit),
                  size = 3.5,
                  color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 9 ~ "white",
                                    TRUE ~ "#252525")) + 
        geom_text(data = mp_etiq, 
                  aes(label = valor, 
                      y = 90, 
                      x = estrato2), 
                  size = 4.0, 
                  inherit.aes = FALSE) 
    }
    
  } else {

    return("Prueba otra vez")

  }
}  

# Función que genera los gráficos de niveles de logro según estratos específicos #
#--------------------------------------------------------------------------------#

graf_spcf <- function(bd_datos){
  
  # Datos del grado y el área evaluada #
  #------------------------------------#
  
  nom_grado <- unique(bd_datos$grado_eval)
  nom_area <- unique(bd_datos$area_eval)
  
  # Total de niveles de logro #
  #---------------------------#
  
  totniv <- bd_datos %>% 
    filter(tipo %in% "Nivel de logro") %>% 
    select(tipo_esp) %>%
    arrange(tipo_esp) %>%
    pull() %>% 
    unique() %>% 
    length()
  
  # Base de datos para generar gráfico #
  #------------------------------------#
  
  bd1 <- bd_datos %>% 
    filter(tipo %in% "Nivel de logro") %>% 
    select(estrato1_1,estrato2,tipo_esp,valor)
  
  if (totniv == 4){
    
    # Cálculo de las posiciones de las etiquetas #
    #--------------------------------------------#
    
    pos <- bd1 %>% 
      pivot_wider(names_from = tipo_esp,
                  values_from = valor) %>% 
      rename(n_pi = `Previo al inicio`,n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
      mutate(pos_sa = case_when(n_sa >= 12 ~ n_sa/2,
                                TRUE ~ n_sa + 11),
             pos_pr = n_pr/2,
             pos_in = case_when(n_in >= 12 ~ n_pr + n_in/2, 
                                TRUE ~  n_pr + n_in + n_pi + 11),
             pos_pi = case_when(n_pi >= 12 ~ n_pr + n_in + n_pi/2,
                                n_in < 12 ~ n_pr + n_in + n_pi + 22,
                                TRUE ~ n_pr + n_in + n_pi + 11)) %>%
      mutate(pos_pr = pos_pr*-1,
             pos_in = pos_in*-1,
             pos_pi = pos_pi*-1) %>% 
      pivot_longer(cols = 7:10,
                   names_to = "nivel",
                   values_to = "posit") %>% 
      mutate(tipo_esp = case_when(nivel %in% "pos_pi" ~ "Previo al inicio",
                                  nivel %in% "pos_in" ~ "En inicio",
                                  nivel %in% "pos_pr" ~ "En proceso",
                                  TRUE ~ "Satisfactorio")) %>% 
      select(estrato1_1,estrato2,tipo_esp,posit)
    
    # Cálculo de la medida promedio #
    #-------------------------------#
    
    mp_etiq <- bd_datos %>% 
      filter(!tipo %in% "Nivel de logro") %>% 
      select(estrato1_1,estrato2,valor)
    
    # Integración de las bases de logros y posición de etiquetas #
    #------------------------------------------------------------#
    
    niveles <- bd1 %>% 
      left_join(pos, by = c("estrato1_1","estrato2","tipo_esp")) %>% 
      mutate(tipo_esp=factor(tipo_esp,
                             levels=c("Previo al inicio",
                                      "En inicio",
                                      "En proceso",
                                      "Satisfactorio"),
                             labels=c("Previo al inicio",
                                      "En inicio",
                                      "En proceso",
                                      "Satisfactorio"))) %>% 
      mutate(estrato_num = as.numeric(as.factor(estrato1_1))) %>% 
      mutate(etiq = puntocoma2(valor,1),
             valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                               TRUE ~ valor)
      )
    
    # Total de categorías para definir límites de la línea gris de Satisfactorio #
    #----------------------------------------------------------------------------#
    
    tot_cat <- length(unique(niveles$estrato2))
    
    # Gráfico #
    #---------#
    
    ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) +
      geom_col(width = 0.35) +
      scale_y_continuous(limits = c(-100,100)) + 
      geom_segment(aes(y = 0,
                       yend = 0,
                       x = 0.7,
                       xend = tot_cat + 0.3),
                   linetype = "solid",
                   color = "#252525",
                   lwd = 0.3,
                   alpha = 0.5) +
      scale_fill_manual(values = c(color_pre_in,color_inicio,color_proces,color_satisf)) + 
      theme_bw() +
      theme(
        panel.border = element_blank(),
        panel.grid = element_blank(),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.text = element_text(size = 12,
                                   color = "#252525"),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 12,
                                   color = "#252525"),
        plot.title = element_text(size = 15,
                                  color = "#252525",
                                  hjust = 0.5),
        plot.subtitle = element_text(size = 15,
                                     color = "#252525",
                                     hjust = 0.5),
        panel.spacing = unit(0, "lines"),
        strip.background = element_rect(fill = "transparent",
                                        color = NA),
        strip.text = element_text(size = 15, 
                                  color = "#252525",
                                  hjust = 0.5)
      ) +
      geom_text(aes(label = etiq,
                    y = posit),
                size = 4.5,
                color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                  TRUE ~ "#252525")) +
      geom_text(data = mp_etiq, 
                aes(label = valor, 
                    y = 90, 
                    x = estrato2), 
                size = 4.5, 
                inherit.aes = FALSE) +
      labs(title = nom_grado,
           subtitle = nom_area) +
      geom_text(aes(x=0.50,
                    y=0.00,
                    label="Niveles de logro (%)"),
                size=2.8,
                alpha=0.2,
                angle = 90,
                color = "#252525") +
      geom_text(aes(x=0.65,
                    y=90,
                    label="Medida \npromedio"),
                size=2.8,
                alpha=0.2,
                color = "#252525") 

  } else if (totniv == 3) {
    
    # Cálculo de las posiciones de las etiquetas #
    #--------------------------------------------#
    
    pos <- bd1 %>% 
      pivot_wider(names_from = tipo_esp,
                  values_from = valor) %>% 
      rename(n_in = `En inicio`,n_pr = `En proceso`, n_sa = `Satisfactorio`) %>% 
      mutate(pos_sa = case_when(n_sa >= 12 ~ n_sa/2,
                                TRUE ~ n_sa + 11),
             pos_pr = n_pr/2,
             pos_in = case_when(n_in >= 12 ~ n_pr + n_in/2, 
                                TRUE ~  n_pr + n_in + 11)) %>%
      mutate(pos_pr = pos_pr*-1,
             pos_in = pos_in*-1) %>% 
      pivot_longer(cols = 6:8,
                   names_to = "nivel",
                   values_to = "posit") %>% 
      mutate(tipo_esp = case_when(nivel %in% "pos_in" ~ "En inicio",
                                  nivel %in% "pos_pr" ~ "En proceso",
                                  TRUE ~ "Satisfactorio")) %>% 
      select(estrato1_1,estrato2,tipo_esp,posit)
    
    # Cálculo de la medida promedio #
    #-------------------------------#
    
    mp_etiq <- bd_datos %>% 
      filter(!tipo %in% "Nivel de logro") %>% 
      select(estrato1_1,estrato2,valor)
    
    # Integración de las bases de logros y posición de etiquetas #
    #------------------------------------------------------------#
    
    niveles <- bd1 %>% 
      left_join(pos, by = c("estrato1_1","estrato2","tipo_esp")) %>% 
      mutate(tipo_esp=factor(tipo_esp,
                             levels=c("En inicio",
                                      "En proceso",
                                      "Satisfactorio"),
                             labels=c("En inicio",
                                      "En proceso",
                                      "Satisfactorio"))) %>% 
      mutate(estrato_num = as.numeric(as.factor(estrato1_1))) %>% 
      mutate(etiq = puntocoma2(valor,1),
             valor = case_when(!tipo_esp %in% "Satisfactorio" ~ valor*-1,
                               TRUE ~ valor)
      )
    
    # Total de categorías para definir límites de la línea gris de Satisfactorio #
    #----------------------------------------------------------------------------#
    
    tot_cat <- length(unique(niveles$estrato2))
    
    # Gráfico #
    #---------#
    
    ggplot(niveles, aes(x = estrato2, y = valor, fill = tipo_esp)) +
      geom_col(width = 0.35) +
      scale_y_continuous(limits = c(-100,100)) + 
      geom_segment(aes(y = 0,
                       yend = 0,
                       x = 0.7,
                       xend = tot_cat + 0.3),
                   linetype = "solid",
                   color = "#252525",
                   lwd = 0.3,
                   alpha = 0.5) +
      scale_fill_manual(values = c(color_inicio,color_proces,color_satisf)) + 
      theme_bw() +
      theme(
        panel.border = element_blank(),
        panel.grid = element_blank(),
        legend.position = "bottom",
        legend.title = element_blank(),
        legend.text = element_text(size = 12,
                                   color = "#252525"),
        axis.title = element_blank(),
        axis.ticks = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 12,
                                   color = "#252525"),
        plot.title = element_text(size = 15,
                                  color = "#252525",
                                  hjust = 0.5),
        plot.subtitle = element_text(size = 15,
                                     color = "#252525",
                                     hjust = 0.5),
        panel.spacing = unit(0, "lines"),
        strip.background = element_rect(fill = "transparent",
                                        color = NA),
        strip.text = element_text(size = 15, 
                                  color = "#252525",
                                  hjust = 0.5)
      ) +
      geom_text(aes(label = etiq,
                    y = posit),
                size = 4.5,
                color = case_when(niveles$tipo_esp %in% "En inicio" & abs(niveles$valor) >= 12 ~ "white",
                                  TRUE ~ "#252525")) +
      geom_text(data = mp_etiq, 
                aes(label = valor, 
                    y = 90, 
                    x = estrato2), 
                size = 4.5, 
                inherit.aes = FALSE) +
      labs(title = nom_grado,
           subtitle = nom_area) +
      geom_text(aes(x=0.50,
                    y=0.00,
                    label="Niveles de logro (%)"),
                size=2.8,
                alpha=0.2,
                angle = 90,
                color = "#252525") +
      geom_text(aes(x=0.65,
                    y=90,
                    label="Medida \npromedio"),
                size=2.8,
                alpha=0.2,
                color = "#252525") 
  }
}
